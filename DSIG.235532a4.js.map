{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/other/DSIG.js"],"names":["DSIG","SimpleTable","constructor","dict","dataview","p","version","uint32","numSignatures","uint16","flags","signatureRecords","Array","map","_","SignatureRecord","getData","signatureID","record","parser","currentPosition","tableStart","offset","SignatureBlockFormat1","format","length","Offset32","signatureLength","signature","readBytes"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMF,IAAN,EAAYC,QAAZ,CAAd;AACA,SAAKE,OAAL,GAAeD,CAAC,CAACE,MAAjB;AACA,SAAKC,aAAL,GAAqBH,CAAC,CAACI,MAAvB;AACA,SAAKC,KAAL,GAAaL,CAAC,CAACI,MAAf;AACA,SAAKE,gBAAL,GAAwB,CAAC,GAAG,IAAIC,KAAJ,CAAU,KAAKJ,aAAf,CAAJ,EAAmCK,GAAnC,CACrBC,CAAD,IAAO,IAAIC,eAAJ,CAAoBV,CAApB,CADe,CAAxB;AAGD;;AAEDW,EAAAA,OAAO,CAACC,WAAD,EAAc;AACnB,UAAMC,MAAM,GAAG,KAAKP,gBAAL,CAAsBM,WAAtB,CAAf;AACA,SAAKE,MAAL,CAAYC,eAAZ,GAA8B,KAAKC,UAAL,GAAkBH,MAAM,CAACI,MAAvD;AACA,WAAO,IAAIC,qBAAJ,CAA0B,KAAKJ,MAA/B,CAAP;AACD;;AAf4B;;;;AAkB/B,MAAMJ,eAAN,CAAsB;AACpBb,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,SAAKmB,MAAL,GAAcnB,CAAC,CAACE,MAAhB;AACA,SAAKkB,MAAL,GAAcpB,CAAC,CAACE,MAAhB;AACA,SAAKe,MAAL,GAAcjB,CAAC,CAACqB,QAAhB,CAHa,CAGa;AAC3B;;AALmB;;AAQtB,MAAMH,qBAAN,CAA4B;AAC1B;AACA;AACA;AACArB,EAAAA,WAAW,CAACG,CAAD,EAAI;AACbA,IAAAA,CAAC,CAACI,MAAF;AACAJ,IAAAA,CAAC,CAACI,MAAF;AACA,SAAKkB,eAAL,GAAuBtB,CAAC,CAACE,MAAzB;AACA,SAAKqB,SAAL,GAAiBvB,CAAC,CAACwB,SAAF,CAAY,KAAKF,eAAjB,CAAjB,CAJa,CAIuC;AACrD;;AATyB","file":"DSIG.235532a4.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../../simple-table.js\";\n\n/**\n * The OpenType `DSIG` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/DSIG\n */\nclass DSIG extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n    this.version = p.uint32;\n    this.numSignatures = p.uint16;\n    this.flags = p.uint16;\n    this.signatureRecords = [...new Array(this.numSignatures)].map(\n      (_) => new SignatureRecord(p)\n    );\n  }\n\n  getData(signatureID) {\n    const record = this.signatureRecords[signatureID];\n    this.parser.currentPosition = this.tableStart + record.offset;\n    return new SignatureBlockFormat1(this.parser);\n  }\n}\n\nclass SignatureRecord {\n  constructor(p) {\n    this.format = p.uint32;\n    this.length = p.uint32;\n    this.offset = p.Offset32; // from the beginning of the DSIG table\n  }\n}\n\nclass SignatureBlockFormat1 {\n  // \"Signature blocks may have various formats; currently one format is defined.\"\n  // There is so much optimism here. There might be more formats! We should reserve\n  // _multiple_ uint16! We have BIG PLANS! ...some time before 2002!\n  constructor(p) {\n    p.uint16;\n    p.uint16;\n    this.signatureLength = p.uint32;\n    this.signature = p.readBytes(this.signatureLength); // this is a PKCS#7 packet, and you get to deadl with that yourself.\n  }\n}\n\nexport { DSIG };\n"]}