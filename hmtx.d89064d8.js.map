{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/hmtx.js"],"names":["hmtx","SimpleTable","constructor","dict","dataview","tables","p","numberOfHMetrics","hhea","numGlyphs","maxp","metricsStart","currentPosition","Array","map","_","LongHorMetric","uint16","int16","lsbStart","w","b","advanceWidth","lsb"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,EAAyB;AAClC,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMH,IAAN,EAAYC,QAAZ,CAAd;AAEA,UAAMG,gBAAgB,GAAGF,MAAM,CAACG,IAAP,CAAYD,gBAArC;AACA,UAAME,SAAS,GAAGJ,MAAM,CAACK,IAAP,CAAYD,SAA9B;AAEA,UAAME,YAAY,GAAGL,CAAC,CAACM,eAAvB;AACA,uBAAK,IAAL,EAAY,UAAZ,EAAuB,MAAM;AAC3BN,MAAAA,CAAC,CAACM,eAAF,GAAoBD,YAApB;AACA,aAAO,CAAC,GAAG,IAAIE,KAAJ,CAAUN,gBAAV,CAAJ,EAAiCO,GAAjC,CACJC,CAAD,IAAO,IAAIC,aAAJ,CAAkBV,CAAC,CAACW,MAApB,EAA4BX,CAAC,CAACY,KAA9B,CADF,CAAP;AAGD,KALD;;AAOA,QAAIX,gBAAgB,GAAGE,SAAvB,EAAkC;AAChC,YAAMU,QAAQ,GAAGR,YAAY,GAAGJ,gBAAgB,GAAG,CAAnD;AACA,yBAAK,IAAL,EAAY,kBAAZ,EAA+B,MAAM;AACnCD,QAAAA,CAAC,CAACM,eAAF,GAAoBO,QAApB;AACA,eAAO,CAAC,GAAG,IAAIN,KAAJ,CAAUJ,SAAS,GAAGF,gBAAtB,CAAJ,EAA6CO,GAA7C,CAAkDC,CAAD,IAAOT,CAAC,CAACY,KAA1D,CAAP;AACD,OAHD;AAID;AACF;;AAtB4B;;;;AAyB/B,MAAMF,aAAN,CAAoB;AAClBd,EAAAA,WAAW,CAACkB,CAAD,EAAIC,CAAJ,EAAO;AAChB,SAAKC,YAAL,GAAoBF,CAApB;AACA,SAAKG,GAAL,GAAWF,CAAX;AACD;;AAJiB","file":"hmtx.d89064d8.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../simple-table.js\";\nimport lazy from \"../../../lazy.js\";\n\n/**\n * The OpenType `hmtx` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/hmtx\n */\nclass hmtx extends SimpleTable {\n  constructor(dict, dataview, tables) {\n    const { p } = super(dict, dataview);\n\n    const numberOfHMetrics = tables.hhea.numberOfHMetrics;\n    const numGlyphs = tables.maxp.numGlyphs;\n\n    const metricsStart = p.currentPosition;\n    lazy(this, `hMetrics`, () => {\n      p.currentPosition = metricsStart;\n      return [...new Array(numberOfHMetrics)].map(\n        (_) => new LongHorMetric(p.uint16, p.int16)\n      );\n    });\n\n    if (numberOfHMetrics < numGlyphs) {\n      const lsbStart = metricsStart + numberOfHMetrics * 4;\n      lazy(this, `leftSideBearings`, () => {\n        p.currentPosition = lsbStart;\n        return [...new Array(numGlyphs - numberOfHMetrics)].map((_) => p.int16);\n      });\n    }\n  }\n}\n\nclass LongHorMetric {\n  constructor(w, b) {\n    this.advanceWidth = w;\n    this.lsb = b;\n  }\n}\n\nexport { hmtx };\n"]}