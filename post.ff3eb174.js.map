{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/post.js"],"names":["post","SimpleTable","constructor","dict","dataview","p","version","legacyFixed","italicAngle","fixed","underlinePosition","fword","underlineThickness","isFixedPitch","uint32","minMemType42","maxMemType42","minMemType1","maxMemType1","verifyLength","numGlyphs","uint16","glyphNameIndex","Array","map","_","namesOffset","currentPosition","glyphNameOffsets","i","index","macStrings","length","push","bytelength","int8","skip","offset","getGlyphName","glyphid","console","warn","next","len","parser","data","readBytes","b","String","fromCharCode","join"],"mappings":"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","file":"post.ff3eb174.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../simple-table.js\";\n\n/**\n * The OpenType `post` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/post\n */\nclass post extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    this.version = p.legacyFixed;\n    this.italicAngle = p.fixed;\n    this.underlinePosition = p.fword;\n    this.underlineThickness = p.fword;\n    this.isFixedPitch = p.uint32;\n    this.minMemType42 = p.uint32;\n    this.maxMemType42 = p.uint32;\n    this.minMemType1 = p.uint32;\n    this.maxMemType1 = p.uint32;\n\n    if (this.version === 1 || this.version === 3) return p.verifyLength();\n\n    this.numGlyphs = p.uint16;\n\n    if (this.version === 2) {\n      this.glyphNameIndex = [...new Array(this.numGlyphs)].map((_) => p.uint16);\n\n      // Note: we don't actually build `this.names` because it's a frankly bizarre\n      // byte blob that encodes strings as \"length-and-then-bytes\" such that it\n      // needs to be loaded entirely in memory before it's useful. That's fine for\n      // printers, but is nuts for anything else.\n\n      // Instead, we parse the data only enough to build a NEW type of lookup that\n      // tells us which offset a glyph's name bytes are inside the names blob, with\n      // the length of a name determined by offsets[next] - offsets[this].\n\n      this.namesOffset = p.currentPosition;\n      this.glyphNameOffsets = [1];\n\n      for (let i = 0; i < this.numGlyphs; i++) {\n        let index = this.glyphNameIndex[i];\n        if (index < macStrings.length) {\n          this.glyphNameOffsets.push(this.glyphNameOffsets[i]);\n          continue;\n        }\n        let bytelength = p.int8;\n        p.skip(bytelength);\n        this.glyphNameOffsets.push(this.glyphNameOffsets[i] + bytelength + 1);\n      }\n    }\n\n    if (this.version === 2.5) {\n      this.offset = [...new Array(this.numGlyphs)].map((_) => p.int8);\n    }\n  }\n\n  getGlyphName(glyphid) {\n    if (this.version !== 2) {\n      console.warn(\n        `post table version ${this.version} does not support glyph name lookups`\n      );\n      return ``;\n    }\n\n    let index = this.glyphNameIndex[glyphid];\n    if (index < 258) return macStrings[index];\n\n    let offset = this.glyphNameOffsets[glyphid];\n    let next = this.glyphNameOffsets[glyphid + 1];\n    let len = next - offset - 1;\n    if (len === 0) return `.notdef.`;\n\n    this.parser.currentPosition = this.namesOffset + offset;\n    const data = this.parser.readBytes(len, this.namesOffset + offset, 8, true);\n    return data.map((b) => String.fromCharCode(b)).join(``);\n  }\n}\n\nexport { post };\n\nconst macStrings = [\n  `.notdef`,\n  `.null`,\n  `nonmarkingreturn`,\n  `space`,\n  `exclam`,\n  `quotedbl`,\n  `numbersign`,\n  `dollar`,\n  `percent`,\n  `ampersand`,\n  `quotesingle`,\n  `parenleft`,\n  `parenright`,\n  `asterisk`,\n  `plus`,\n  `comma`,\n  `hyphen`,\n  `period`,\n  `slash`,\n  `zero`,\n  `one`,\n  `two`,\n  `three`,\n  `four`,\n  `five`,\n  `six`,\n  `seven`,\n  `eight`,\n  `nine`,\n  `colon`,\n  `semicolon`,\n  `less`,\n  `equal`,\n  `greater`,\n  `question`,\n  `at`,\n  `A`,\n  `B`,\n  `C`,\n  `D`,\n  `E`,\n  `F`,\n  `G`,\n  `H`,\n  `I`,\n  `J`,\n  `K`,\n  `L`,\n  `M`,\n  `N`,\n  `O`,\n  `P`,\n  `Q`,\n  `R`,\n  `S`,\n  `T`,\n  `U`,\n  `V`,\n  `W`,\n  `X`,\n  `Y`,\n  `Z`,\n  `bracketleft`,\n  `backslash`,\n  `bracketright`,\n  `asciicircum`,\n  `underscore`,\n  `grave`,\n  `a`,\n  `b`,\n  `c`,\n  `d`,\n  `e`,\n  `f`,\n  `g`,\n  `h`,\n  `i`,\n  `j`,\n  `k`,\n  `l`,\n  `m`,\n  `n`,\n  `o`,\n  `p`,\n  `q`,\n  `r`,\n  `s`,\n  `t`,\n  `u`,\n  `v`,\n  `w`,\n  `x`,\n  `y`,\n  `z`,\n  `braceleft`,\n  `bar`,\n  `braceright`,\n  `asciitilde`,\n  `Adieresis`,\n  `Aring`,\n  `Ccedilla`,\n  `Eacute`,\n  `Ntilde`,\n  `Odieresis`,\n  `Udieresis`,\n  `aacute`,\n  `agrave`,\n  `acircumflex`,\n  `adieresis`,\n  `atilde`,\n  `aring`,\n  `ccedilla`,\n  `eacute`,\n  `egrave`,\n  `ecircumflex`,\n  `edieresis`,\n  `iacute`,\n  `igrave`,\n  `icircumflex`,\n  `idieresis`,\n  `ntilde`,\n  `oacute`,\n  `ograve`,\n  `ocircumflex`,\n  `odieresis`,\n  `otilde`,\n  `uacute`,\n  `ugrave`,\n  `ucircumflex`,\n  `udieresis`,\n  `dagger`,\n  `degree`,\n  `cent`,\n  `sterling`,\n  `section`,\n  `bullet`,\n  `paragraph`,\n  `germandbls`,\n  `registered`,\n  `copyright`,\n  `trademark`,\n  `acute`,\n  `dieresis`,\n  `notequal`,\n  `AE`,\n  `Oslash`,\n  `infinity`,\n  `plusminus`,\n  `lessequal`,\n  `greaterequal`,\n  `yen`,\n  `mu`,\n  `partialdiff`,\n  `summation`,\n  `product`,\n  `pi`,\n  `integral`,\n  `ordfeminine`,\n  `ordmasculine`,\n  `Omega`,\n  `ae`,\n  `oslash`,\n  `questiondown`,\n  `exclamdown`,\n  `logicalnot`,\n  `radical`,\n  `florin`,\n  `approxequal`,\n  `Delta`,\n  `guillemotleft`,\n  `guillemotright`,\n  `ellipsis`,\n  `nonbreakingspace`,\n  `Agrave`,\n  `Atilde`,\n  `Otilde`,\n  `OE`,\n  `oe`,\n  `endash`,\n  `emdash`,\n  `quotedblleft`,\n  `quotedblright`,\n  `quoteleft`,\n  `quoteright`,\n  `divide`,\n  `lozenge`,\n  `ydieresis`,\n  `Ydieresis`,\n  `fraction`,\n  `currency`,\n  `guilsinglleft`,\n  `guilsinglright`,\n  `fi`,\n  `fl`,\n  `daggerdbl`,\n  `periodcentered`,\n  `quotesinglbase`,\n  `quotedblbase`,\n  `perthousand`,\n  `Acircumflex`,\n  `Ecircumflex`,\n  `Aacute`,\n  `Edieresis`,\n  `Egrave`,\n  `Iacute`,\n  `Icircumflex`,\n  `Idieresis`,\n  `Igrave`,\n  `Oacute`,\n  `Ocircumflex`,\n  `apple`,\n  `Ograve`,\n  `Uacute`,\n  `Ucircumflex`,\n  `Ugrave`,\n  `dotlessi`,\n  `circumflex`,\n  `tilde`,\n  `macron`,\n  `breve`,\n  `dotaccent`,\n  `ring`,\n  `cedilla`,\n  `hungarumlaut`,\n  `ogonek`,\n  `caron`,\n  `Lslash`,\n  `lslash`,\n  `Scaron`,\n  `scaron`,\n  `Zcaron`,\n  `zcaron`,\n  `brokenbar`,\n  `Eth`,\n  `eth`,\n  `Yacute`,\n  `yacute`,\n  `Thorn`,\n  `thorn`,\n  `minus`,\n  `multiply`,\n  `onesuperior`,\n  `twosuperior`,\n  `threesuperior`,\n  `onehalf`,\n  `onequarter`,\n  `threequarters`,\n  `franc`,\n  `Gbreve`,\n  `gbreve`,\n  `Idotaccent`,\n  `Scedilla`,\n  `scedilla`,\n  `Cacute`,\n  `cacute`,\n  `Ccaron`,\n  `ccaron`,\n  `dcroat`,\n];\n"]}