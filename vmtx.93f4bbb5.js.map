{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/other/vmtx.js"],"names":["vmtx","SimpleTable","constructor","dict","dataview","tables","numOfLongVerMetrics","vhea","numGlyphs","maxp","metricsStart","p","currentPosition","lazy","Array","map","_","LongVertMetric","uint16","int16","tsbStart","h","b","advanceHeight","topSideBearing"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiBC,MAAjB,EAAyB;AAClC,UAAMF,IAAN,EAAYC,QAAZ;AACA,UAAME,mBAAmB,GAAGD,MAAM,CAACE,IAAP,CAAYD,mBAAxC;AACA,UAAME,SAAS,GAAGH,MAAM,CAACI,IAAP,CAAYD,SAA9B;AAEA,UAAME,YAAY,GAAGC,CAAC,CAACC,eAAvB;AACAC,IAAAA,IAAI,CAAC,IAAD,EAAQ,UAAR,EAAmB,MAAM;AAC3BF,MAAAA,CAAC,CAACC,eAAF,GAAoBF,YAApB;AACA,aAAO,CAAC,GAAG,IAAII,KAAJ,CAAUR,mBAAV,CAAJ,EAAoCS,GAApC,CACJC,CAAD,IAAO,IAAIC,cAAJ,CAAmBN,CAAC,CAACO,MAArB,EAA6BP,CAAC,CAACQ,KAA/B,CADF,CAAP;AAGD,KALG,CAAJ;;AAOA,QAAIb,mBAAmB,GAAGE,SAA1B,EAAqC;AACnC,YAAMY,QAAQ,GAAGV,YAAY,GAAGJ,mBAAmB,GAAG,CAAtD;AACAO,MAAAA,IAAI,CAAC,IAAD,EAAQ,iBAAR,EAA0B,MAAM;AAClCF,QAAAA,CAAC,CAACC,eAAF,GAAoBQ,QAApB;AACA,eAAO,CAAC,GAAG,IAAIN,KAAJ,CAAUN,SAAS,GAAGF,mBAAtB,CAAJ,EAAgDS,GAAhD,CACJC,CAAD,IAAOL,CAAC,CAACQ,KADJ,CAAP;AAGD,OALG,CAAJ;AAMD;AACF;;AAvB4B;;;;AA0B/B,MAAMF,cAAN,CAAqB;AACnBf,EAAAA,WAAW,CAACmB,CAAD,EAAIC,CAAJ,EAAO;AAChB,SAAKC,aAAL,GAAqBF,CAArB;AACA,SAAKG,cAAL,GAAsBF,CAAtB;AACD;;AAJkB","file":"vmtx.93f4bbb5.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../../simple-table.js\";\n\n/**\n * The OpenType `vmtx` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/vmtx\n *\n * The overall structure of the vertical metrics table consists of two arrays:\n * a vMetrics array, followed by an array of top side bearings.\n *\n */\nclass vmtx extends SimpleTable {\n  constructor(dict, dataview, tables) {\n    super(dict, dataview);\n    const numOfLongVerMetrics = tables.vhea.numOfLongVerMetrics;\n    const numGlyphs = tables.maxp.numGlyphs;\n\n    const metricsStart = p.currentPosition;\n    lazy(this, `vMetrics`, () => {\n      p.currentPosition = metricsStart;\n      return [...new Array(numOfLongVerMetrics)].map(\n        (_) => new LongVertMetric(p.uint16, p.int16)\n      );\n    });\n\n    if (numOfLongVerMetrics < numGlyphs) {\n      const tsbStart = metricsStart + numOfLongVerMetrics * 4;\n      lazy(this, `topSideBearings`, () => {\n        p.currentPosition = tsbStart;\n        return [...new Array(numGlyphs - numOfLongVerMetrics)].map(\n          (_) => p.int16\n        );\n      });\n    }\n  }\n}\n\nclass LongVertMetric {\n  constructor(h, b) {\n    this.advanceHeight = h;\n    this.topSideBearing = b;\n  }\n}\n\nexport { vmtx };\n"]}