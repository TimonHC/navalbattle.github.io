{"version":3,"sources":["NewNavalBattle.js"],"names":["_RESOLUTION","_FLEET","gameIsOver","Field","battleField","Array","from","length","min","max","Math","ceil","floor","random","result","getRandomIntInclusive","number","coordinates","push","PlayerField","placeShipsOnField","coordinate","row","col","shipLength","startCoordinate","isWithinTheGameField","isOneDeckCanBePlaced","isSurroundingCellsFree","i","randomCoordinate","generateRandomCoordinateXY","canBeAttachedVertical","canBeAttachedHorizontal","attachVertical","attachHorizontal","isCanBeAttachedVertical","isCanBeAttachedHorizontal","attachShip","sourceField","guessField","markSunkDeck","isOneDeckShip","isSunkVertical","setTopPoint","topPoint","lowPoint","isCompletelySunkTopSide","setLowPoint","isSunkHorizontal","field","HumanField","index","convertNumberToCoordArr","aiField","humanGuessField","aiAttackRandomCoordinate","markSunkShip","alert","isGameOver","AiField","humanField","aIguessField","initFields"],"mappings":"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","file":"NewNavalBattle.64e687d1.js","sourceRoot":"..","sourcesContent":["\r\n\r\nconst _RESOLUTION = 10;\r\nconst _FLEET = [4, 3, 3, 2, 2, 2, 1, 1, 1, 1];\r\nexport let gameIsOver = false;\r\nclass Field {\r\n\r\n    constructor() {\r\n        this.battleField = Array.from({length: _RESOLUTION},\r\n            () => Array.from({length: _RESOLUTION},\r\n                () => ('@')));\r\n    }\r\n\r\n    getRandomIntInclusive(min, max) {\r\n        min = Math.ceil(min);\r\n        max = Math.floor(max);\r\n        return Math.floor(Math.random() * (max - min + 1)) + min; //Максимум и минимум включаются\r\n    }\r\n\r\n    generateRandomCoordinateXY(result) {\r\n        result = [this.getRandomIntInclusive(0, 9), this.getRandomIntInclusive(0, 9)]\r\n        return result;\r\n    }\r\n\r\n    convertNumberToCoordArr(number) {\r\n        let coordinates = [];\r\n        coordinates.push(Math.floor(number / _RESOLUTION), number % _RESOLUTION);\r\n        return coordinates;\r\n    }\r\n}\r\n\r\nclass PlayerField extends Field {\r\n\r\n    constructor() {\r\n        super();\r\n        this._FLEET = _FLEET;\r\n        this.placeShipsOnField();\r\n    }\r\n\r\n    isSurroundingCellsFree(coordinate) {\r\n        let row = coordinate[0];\r\n        let col = coordinate[1];\r\n\r\n        if (row === 0) {\r\n            return this.battleField[row][col - 1] === '@'\r\n                && this.battleField[row][col + 1] === '@'\r\n                && this.battleField[row + 1][col + 1] === '@'\r\n                && this.battleField[row + 1][col] === '@'\r\n                && this.battleField[row + 1][col - 1] === '@'\r\n        }\r\n\r\n        if (row === 9) {\r\n            return this.battleField[row][col - 1] === '@'\r\n                && this.battleField[row - 1][col - 1] === '@'\r\n                && this.battleField[row - 1][col] === '@'\r\n                && this.battleField[row - 1][col + 1] === '@'\r\n                && this.battleField[row][col + 1] === '@'\r\n        }\r\n\r\n        if (col === 0) {\r\n            return this.battleField[row - 1][col] === '@'\r\n                && this.battleField[row - 1][col + 1] === '@'\r\n                && this.battleField[row][col + 1] === '@'\r\n                && this.battleField[row + 1][col + 1] === '@'\r\n                && this.battleField[row + 1][col] === '@'\r\n        }\r\n\r\n        if (col === 9) {\r\n            return this.battleField[row][col - 1] === '@'\r\n                && this.battleField[row - 1][col - 1] === '@'\r\n                && this.battleField[row - 1][col] === '@'\r\n                && this.battleField[row + 1][col] === '@'\r\n                && this.battleField[row + 1][col - 1] === '@'\r\n        }\r\n\r\n        return this.battleField[row][col - 1] === '@'\r\n            && this.battleField[row - 1][col - 1] === '@'\r\n            && this.battleField[row - 1][col] === '@'\r\n            && this.battleField[row - 1][col + 1] === '@'\r\n            && this.battleField[row][col + 1] === '@'\r\n            && this.battleField[row + 1][col + 1] === '@'\r\n            && this.battleField[row + 1][col] === '@'\r\n            && this.battleField[row + 1][col - 1] === '@'\r\n\r\n    }\r\n\r\n    isCanBeAttachedVertical(shipLength, startCoordinate) {\r\n\r\n        let row = startCoordinate[0];\r\n        let col = startCoordinate[1];\r\n        let result = true;\r\n        let isWithinTheGameField = (row + shipLength < _RESOLUTION);\r\n        let isOneDeckCanBePlaced = this.isSurroundingCellsFree(startCoordinate) && (this.battleField[row][col] === '@');\r\n        if (!isWithinTheGameField) return false;\r\n        if (shipLength === 1) return isOneDeckCanBePlaced;\r\n\r\n        for (let i = 0; i < shipLength; i++) {\r\n            if (this.battleField[row + i][col] !== '@' || !this.isSurroundingCellsFree([row + i, col])) {\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        return result && isWithinTheGameField;\r\n    }\r\n\r\n    isCanBeAttachedHorizontal(shipLength, startCoordinate) {\r\n\r\n        let row = startCoordinate[0];\r\n        let col = startCoordinate[1];\r\n        let result = true;\r\n        let isWithinTheGameField = (col + shipLength < _RESOLUTION);\r\n        let isOneDeckCanBePlaced = this.isSurroundingCellsFree([row, col]) && (this.battleField[row][col] === '@');\r\n        if (!isWithinTheGameField) return false;\r\n        if (shipLength === 1) return isOneDeckCanBePlaced;\r\n\r\n\r\n        for (let i = 0; i < shipLength; i++) {\r\n            if (this.battleField[row][col + i] !== '@' || !this.isSurroundingCellsFree([row, col + i])) {\r\n                result = false;\r\n            }\r\n        }\r\n\r\n        return result && isWithinTheGameField;\r\n    }\r\n\r\n    attachShip(shipLength) {\r\n        let randomCoordinate = [];\r\n        randomCoordinate = this.generateRandomCoordinateXY(randomCoordinate);\r\n        let canBeAttachedVertical = false;\r\n        let canBeAttachedHorizontal = false;\r\n\r\n        let attachVertical = () => {\r\n            for (let i = 0; i < shipLength; i++) {\r\n                this.battleField[randomCoordinate[0] + i][randomCoordinate[1]] = '#';\r\n            }\r\n        }\r\n\r\n        let attachHorizontal = () => {\r\n            for (let i = 0; i < shipLength; i++) {\r\n                this.battleField[randomCoordinate[0]][randomCoordinate[1] + i] = '#';\r\n            }\r\n        }\r\n\r\n        for (; !(canBeAttachedVertical || canBeAttachedHorizontal);) {\r\n            randomCoordinate = this.generateRandomCoordinateXY(randomCoordinate);\r\n            canBeAttachedVertical = this.isCanBeAttachedVertical(shipLength, randomCoordinate);\r\n            canBeAttachedHorizontal = this.isCanBeAttachedHorizontal(shipLength, randomCoordinate);\r\n        }\r\n\r\n        canBeAttachedVertical && canBeAttachedHorizontal ? this.getRandomIntInclusive(0, 1) === 1 ? attachVertical() : attachHorizontal() : canBeAttachedVertical ? attachVertical() : attachHorizontal();\r\n\r\n\r\n    }\r\n\r\n    placeShipsOnField() {\r\n        for (let i = 0; i < this._FLEET.length; i++) {\r\n            this.attachShip(this._FLEET[i]);\r\n        }\r\n    }\r\n\r\n\r\n\r\n    markSunkShip(coordinate, sourceField, guessField) {\r\n\r\n        function markSunkDeck(coordinate, sourceField, guessField) {\r\n            if (coordinate[1] - 1 > -1\r\n                && sourceField.battleField[coordinate[0]][coordinate[1] - 1] === '@') {\r\n                guessField.battleField[coordinate[0]][coordinate[1] - 1] = '*';\r\n                sourceField.battleField[coordinate[0]][coordinate[1] - 1] = '*';\r\n            }\r\n            if (coordinate[0] - 1 > -1 && coordinate[1] - 1 > -1\r\n                && sourceField.battleField[coordinate[0] - 1][coordinate[1] - 1] === '@') {\r\n                guessField.battleField[coordinate[0] - 1][coordinate[1] - 1] = '*';\r\n                sourceField.battleField[coordinate[0] - 1][coordinate[1] - 1] = '*';\r\n            }\r\n            if (coordinate[0] - 1 > -1\r\n                && sourceField.battleField[coordinate[0] - 1][coordinate[1]] === '@') {\r\n                sourceField.battleField[coordinate[0] - 1][coordinate[1]] = '*';\r\n                guessField.battleField[coordinate[0] - 1][coordinate[1]] = '*';\r\n            }\r\n            if (coordinate[0] - 1 > -1 && coordinate[1] + 1 < 10\r\n                && sourceField.battleField[coordinate[0] - 1][coordinate[1] + 1] === '@') {\r\n                sourceField.battleField[coordinate[0] - 1][coordinate[1] + 1] = '*';\r\n                guessField.battleField[coordinate[0] - 1][coordinate[1] + 1] = '*';\r\n            }\r\n            if (coordinate[1] + 1 < 10\r\n                && sourceField.battleField[coordinate[0]][coordinate[1] + 1] === '@') {\r\n                guessField.battleField[coordinate[0]][coordinate[1] + 1] = '*';\r\n                sourceField.battleField[coordinate[0]][coordinate[1] + 1] = '*';\r\n            }\r\n            if (coordinate[0] + 1 < 10 && coordinate[1] + 1 < 10\r\n                && sourceField.battleField[coordinate[0] + 1][coordinate[1] + 1] === '@') {\r\n                guessField.battleField[coordinate[0] + 1][coordinate[1] + 1] = '*';\r\n                sourceField.battleField[coordinate[0] + 1][coordinate[1] + 1] = '*';\r\n            }\r\n            if (coordinate[0] + 1 < 10\r\n                && sourceField.battleField[coordinate[0] + 1][coordinate[1]] === '@') {\r\n                sourceField.battleField[coordinate[0] + 1][coordinate[1]] = '*';\r\n                guessField.battleField[coordinate[0] + 1][coordinate[1]] = '*';\r\n            }\r\n            if (coordinate[0] + 1 < 10 && coordinate[1] - 1 > -1\r\n                && sourceField.battleField[coordinate[0] + 1][coordinate[1] - 1] === '@') {\r\n                guessField.battleField[coordinate[0] + 1][coordinate[1] - 1] = '*';\r\n                sourceField.battleField[coordinate[0] + 1][coordinate[1] - 1] = '*';\r\n            }\r\n\r\n        }\r\n\r\n        let isOneDeckShip = () => {\r\n            let result = true;\r\n            if (coordinate[0] + 1 < 10) { if (!(sourceField.battleField[coordinate[0] + 1][coordinate[1]] === '@'\r\n                || sourceField.battleField[coordinate[0] + 1][coordinate[1]] === '*')) result = false; }\r\n            if (coordinate[0] - 1 > -1) { if (!(sourceField.battleField[coordinate[0] - 1][coordinate[1]] === '@'\r\n                || sourceField.battleField[coordinate[0] - 1][coordinate[1]] === '*')) result = false; }\r\n            if (coordinate[1] + 1 < 10) { if (!(sourceField.battleField[coordinate[0]][coordinate[1] + 1] === '@'\r\n                || sourceField.battleField[coordinate[0]][coordinate[1] + 1] === '*')) result = false; }\r\n            if (coordinate[1] - 1 > -1) { if (!(sourceField.battleField[coordinate[0]][coordinate[1] - 1] === '@'\r\n                || sourceField.battleField[coordinate[0]][coordinate[1] - 1] === '*')) result = false; }\r\n            return result;\r\n        }\r\n\r\n        //vert\r\n        let isSunkVertical = () => {\r\n\r\n            if ( (coordinate[0] + 1 < 10 && guessField.battleField[coordinate[0] + 1][coordinate[1]] === 'X')\r\n                || (coordinate[0] - 1 > -1 && guessField.battleField[coordinate[0] - 1][coordinate[1]] === 'X') ) {\r\n\r\n                let topPoint, lowPoint;\r\n\r\n                function setTopPoint() {\r\n                    for (let i = 0; i < 4\r\n                    && coordinate[0] + i < 10\r\n                    && guessField.battleField[coordinate[0] + i][coordinate[1]] === 'X'; i++) {\r\n                        topPoint = [coordinate[0] + i, coordinate[1]];\r\n                    }\r\n                }\r\n\r\n                function setLowPoint () {\r\n                    for (let i = 0; i < 4\r\n                    && coordinate[0] - i > -1\r\n                    && guessField.battleField[coordinate[0] - i][coordinate[1]] === 'X'; i++) {\r\n                        lowPoint = [coordinate[0] - i, coordinate[1]];\r\n                    }\r\n                }\r\n\r\n                setTopPoint();\r\n                setLowPoint();\r\n\r\n                let isCompletelySunkBottomSide = () => {\r\n                    if ([lowPoint[0] - 1] > -1) {\r\n                        return sourceField.battleField[lowPoint[0] - 1][lowPoint[1]] !== '#';\r\n                    } else return sourceField.battleField[lowPoint[0]][lowPoint[1]] === 'X';\r\n                }\r\n\r\n                let isCompletelySunkTopSide = () => {\r\n                    if ([topPoint[0] + 1] < 10) {\r\n                        return sourceField.battleField[topPoint[0] + 1][topPoint[1]] !== '#';\r\n                    } else return sourceField.battleField[topPoint[0]][topPoint[1]] === 'X';\r\n                }\r\n\r\n                return isCompletelySunkTopSide() && isCompletelySunkBottomSide();\r\n            }\r\n\r\n        }\r\n\r\n        //horizontal\r\n        let isSunkHorizontal = () => {\r\n\r\n            if ( (coordinate[1] + 1 < 10\r\n                && guessField.battleField[coordinate[0]][coordinate[1] + 1] === 'X')\r\n                || ( coordinate[1] - 1 > -1\r\n                    && guessField.battleField[coordinate[0]][coordinate[1] - 1] === 'X') ) {\r\n\r\n                let topPoint, lowPoint;\r\n\r\n                function setTopPoint() {\r\n                    for (let i = 0; i < 4\r\n                    && coordinate[1] + i < 10\r\n                    && guessField.battleField[coordinate[0]][coordinate[1] + i] === 'X'; i++) {\r\n                        topPoint = [coordinate[0], coordinate[1] + i];\r\n                    }\r\n                }\r\n\r\n                function setLowPoint() {\r\n                    for (let i = 0; i < 4\r\n                    && coordinate[1] - i > -1\r\n                    && guessField.battleField[coordinate[0]][coordinate[1] - i] === 'X'; i++) {\r\n                        lowPoint = [coordinate[0], coordinate[1] - i];\r\n                    }\r\n                }\r\n\r\n                setLowPoint();\r\n                setTopPoint();\r\n\r\n                return sourceField.battleField[topPoint[0]][topPoint[1] + 1] !== '#' && sourceField.battleField[lowPoint[0]][lowPoint[1] - 1] !== '#';\r\n            }\r\n\r\n        }\r\n\r\n        if (isSunkVertical()) {\r\n\r\n            for (let i = 0; i < 4 && coordinate[0] + i < 10\r\n            && guessField.battleField[coordinate[0] + i][coordinate[1]] === 'X'; i++) {\r\n                markSunkDeck([coordinate[0] + i, coordinate[1]], sourceField, guessField)\r\n            }\r\n\r\n            for (let i = 0; i < 4 && coordinate[0] - i > -1\r\n            && guessField.battleField[coordinate[0] - i][coordinate[1]] === 'X'; i++) {\r\n                markSunkDeck([coordinate[0] - i, coordinate[1]], sourceField, guessField)\r\n            }\r\n\r\n        }\r\n\r\n        if (isSunkHorizontal()) {\r\n\r\n            for (let i = 0; i < 4 && coordinate[1] + i < 10\r\n            && guessField.battleField[coordinate[0]][coordinate[1]+ i] === 'X'; i++) {\r\n                markSunkDeck([coordinate[0], coordinate[1] + i], sourceField, guessField)\r\n            }\r\n\r\n            for (let i = 0; i < 4 && coordinate[1] - i > -1\r\n            && guessField.battleField[coordinate[0]][coordinate[1] - i] === 'X'; i++) {\r\n                markSunkDeck([coordinate[0], coordinate[1]  - i], sourceField, guessField)\r\n            }\r\n\r\n        }\r\n\r\n        if (isOneDeckShip()) {\r\n            markSunkDeck(coordinate, sourceField, guessField);\r\n        }\r\n    }\r\n\r\n    isGameOver(field) {\r\n        let result = true;\r\n        for (let row = 0; row < _RESOLUTION; row++) {\r\n            for (let col = 0; col < _RESOLUTION; col++) {\r\n                if (field.battleField[row][col] === '#') result = false;\r\n            }\r\n        }\r\n        if (result) {\r\n            gameIsOver = true;\r\n        }\r\n    }\r\n}\r\n\r\nclass HumanField extends PlayerField {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    humanAttack(index) {\r\n        let coordinates = this.convertNumberToCoordArr(index);\r\n\r\n        switch (aiField.battleField[coordinates[0]][coordinates[1]]) {\r\n            case '@':\r\n                aiField.battleField[coordinates[0]][coordinates[1]] = '*';\r\n                humanGuessField.battleField[coordinates[0]][coordinates[1]] = '*';\r\n                aiField.aiAttackRandomCoordinate();\r\n                break;\r\n            case '#':\r\n                aiField.battleField[coordinates[0]][coordinates[1]] = 'X';\r\n                humanGuessField.battleField[coordinates[0]][coordinates[1]] = 'X';\r\n                this.markSunkShip(coordinates, aiField, humanGuessField);\r\n                break;\r\n            case 'X':\r\n                break;\r\n            case '*':\r\n                break;\r\n            default:\r\n                alert(\"DEFAULT in humanAttack\");\r\n                break;\r\n        }\r\n\r\n\r\n        this.isGameOver(aiField);\r\n    }\r\n\r\n}\r\n\r\nclass AiField extends PlayerField {\r\n\r\n    constructor() {\r\n        super();\r\n    }\r\n\r\n    aiAttackRandomCoordinate() {\r\n        let coordinate = this.generateRandomCoordinateXY()\r\n        switch (humanField.battleField[coordinate[0]][coordinate[1]]) {\r\n            case '@':\r\n                humanField.battleField[coordinate[0]][coordinate[1]] = '*';\r\n                break;\r\n            case '#':\r\n                humanField.battleField[coordinate[0]][coordinate[1]] = 'X';\r\n                aIguessField.battleField[coordinate[0]][coordinate[1]] = 'X';\r\n                this.markSunkShip(coordinate, humanField, aIguessField);\r\n                aiField.aiAttackRandomCoordinate();\r\n                break;\r\n            case 'X':\r\n                aiField.aiAttackRandomCoordinate();\r\n                break;\r\n            case '*':\r\n                aiField.aiAttackRandomCoordinate();\r\n                break;\r\n            default:\r\n                alert(\"ERROR in aiAttackRandomCoordinate()\");\r\n                break;\r\n        }\r\n        this.isGameOver(humanField);\r\n\r\n    }\r\n\r\n\r\n    // processAiAttack(lastSuccessAttackCoordinate) {\r\n    //\r\n    //     let directions = []; //possible direction of attack, excluding directions leading to switching to next line and directions with already empty/hitted cells\r\n    //     const lsac = lastSuccessAttackCoordinate; //shorter form for better readability\r\n    //     let coords = []; //array of first cell coords, from a possibly attack directions\r\n    //     let possibleAttackCoords;\r\n    //\r\n    //     //is an extreme cell of line\r\n    //     function isLastCellInTheLine(coordinate) {\r\n    //         return coordinate % 10 === 0 ||           //left line\r\n    //             coordinate < 10 ||                    //top line\r\n    //             (coordinate % 10) === 9 ||            //right line\r\n    //             Math.floor(coordinate / 10) === 9; //bottom line\r\n    //     }\r\n    //\r\n    //     //get array of a possible attack directions\r\n    //     function getAttackDirections (lsac)  {\r\n    //         let directions = [];\r\n    //\r\n    //         //1. last in a line; 1 - true; 0 - false;\r\n    //         if(isLastCellInTheLine(lsac)) {\r\n    //             lsac % 10 === 0 ? directions.push(1) : directions.push(0); //left line\r\n    //             lsac < 10 ? directions.push(1) : directions.push(0); //top line\r\n    //             (lsac % 10) === 9 ? directions.push(1) : directions.push(0); //right line\r\n    //             Math.floor(lsac / 10) === 9 ? directions.push(1) : directions.push(0); //bottom line\r\n    //         }\r\n    //\r\n    //         //2. there's empty cells;\r\n    //         if (directions[0] !== 0) aIguessField.battleField[lsac - 1] === '@' ? directions[0] = 1 : directions[0] = 0; //left line\r\n    //         if (directions[1] !== 0) aIguessField.battleField[lsac - 10] === '@' ? directions[1] = 1 : directions[1] = 0; //top line\r\n    //         if (directions[2] !== 0) aIguessField.battleField[lsac + 1] === '@' ? directions[2] = 1 : directions[2] = 0; //right line\r\n    //         if (directions[3] !== 0) aIguessField.battleField[lsac + 10] === '@' ? directions[3] = 1 : directions[3] = 0; //bottom line\r\n    //\r\n    //         return directions;\r\n    //     }\r\n    //\r\n    //     directions = getAttackDirections(lsac);\r\n    //\r\n    //     //first cell coords, from a possibly attack directions\r\n    //     function getPossibleAttackCoords () {\r\n    //         directions.forEach(function(direction, index) {\r\n    //             if(direction === 1) {\r\n    //                 switch (index) {\r\n    //                     case 0: coords.push(lsac - 1); break;\r\n    //                     case 1: coords.push(lsac - 10); break;\r\n    //                     case 2: coords.push(lsac + 1); break;\r\n    //                     case 3: coords.push(lsac + 10); break;\r\n    //                     default: break;\r\n    //                 }}\r\n    //         });\r\n    //         return coords;\r\n    //     }\r\n    //\r\n    //     this.nextAttackCoords = getPossibleAttackCoords(nextAttackCoords);\r\n    // }\r\n    //\r\n    // attackVars = {\r\n    //     isThereMultideckShips: this.enemyFleet.includes(2 || 3 || 4),\r\n    //     lastSuccessAttackCoordinate: null,\r\n    //     possibleAttackCoords: [],\r\n    // };\r\n    //\r\n    // isShipSunk() {\r\n    //     let coordsToCompare = [];\r\n    //     let result = true;\r\n    //\r\n    //\r\n    //         //left line\r\n    //         for (let i = 1; humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - i] !== '@' && i < 4; i++) {\r\n    //             coordsToCompare.push(this.attackVars.lastSuccessAttackCoordinate - i);\r\n    //         }\r\n    //\r\n    //\r\n    //\r\n    //         //right line\r\n    //         for (let i = 1; humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + i] !== '@' && i < 4; i++) {\r\n    //             coordsToCompare.push(this.attackVars.lastSuccessAttackCoordinate + i);\r\n    //         }\r\n    //\r\n    //\r\n    //\r\n    //         for (let i = 1; humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - i * VERTICAL_INCREMENT] !== '@' && i < 4; i++) {\r\n    //             coordsToCompare.push(this.attackVars.lastSuccessAttackCoordinate - i * VERTICAL_INCREMENT);\r\n    //         }\r\n    //\r\n    //\r\n    //\r\n    //         for (let i = 1; humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + i * VERTICAL_INCREMENT] !== '@' && i < 4; i++) {\r\n    //             coordsToCompare.push(this.attackVars.lastSuccessAttackCoordinate + i * VERTICAL_INCREMENT);\r\n    //         }\r\n    //\r\n    //     coordsToCompare = coordsToCompare.filter(coord => coord >= 0);\r\n    //     coordsToCompare = coordsToCompare.filter(coord => coord <= 99);\r\n    //\r\n    //     console.log(coordsToCompare);\r\n    //     coordsToCompare.forEach((coordinate) => {if (aIguessField.battleField[coordinate] !== 'X') result = false;});\r\n    //\r\n    //     return result;\r\n    // }\r\n    //\r\n    // aiAttacks() {\r\n    //\r\n    // if (this.attackVars.lastSuccessAttackCoordinate) {\r\n    //     console.log(this.attackVars.lastSuccessAttackCoordinate);\r\n    //     if(this.isShipSunk()) {\r\n    //         this.processSunkShip();\r\n    //     } else {\r\n    //         this.getFinishingCoords();\r\n    //         this.attackPossibleCoords();\r\n    //     }\r\n    //\r\n    //\r\n    // } else {\r\n    //     this.aiAttackRandomCoordinate();\r\n    // }\r\n    //\r\n    // }\r\n    //\r\n    // getFinishingCoords() {\r\n    //\r\n    //     //adding left direction coords\r\n    //     for (let i = 1; i < 4\r\n    //         && aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - i*HORIZONTAL_INCREMENT] === '@'\r\n    //         && (aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] !== 'X'\r\n    //         || aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] !== 'X'); i++) {\r\n    //             this.attackVars.possibleAttackCoords.push(this.attackVars.lastSuccessAttackCoordinate - i);\r\n    //         }\r\n    //\r\n    //     //adding top direction coords\r\n    //     for (let i = 1; i < 4\r\n    //     && aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + i*VERTICAL_INCREMENT] === '@'\r\n    //     && (aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] !== 'X'\r\n    //         || aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] !== 'X'); i++) {\r\n    //         this.attackVars.possibleAttackCoords.push(this.attackVars.lastSuccessAttackCoordinate + i*VERTICAL_INCREMENT);\r\n    //     }\r\n    //\r\n    //\r\n    //     //adding right direction coords\r\n    //     for (let i = 1; i < 4\r\n    //         && aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + i*HORIZONTAL_INCREMENT] === '@'\r\n    //         && (aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] !== 'X'\r\n    //         || aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] !== 'X'); i++) {\r\n    //             this.attackVars.possibleAttackCoords.push(this.attackVars.lastSuccessAttackCoordinate + i);\r\n    //         }\r\n    //\r\n    //     //adding bottom direction coords\r\n    //     for (let i = 1; i < 4\r\n    //         && aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - i*VERTICAL_INCREMENT] === '@'\r\n    //         && (aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] !== 'X'\r\n    //         || aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] !== 'X'); i++) {\r\n    //             this.attackVars.possibleAttackCoords.push(this.attackVars.lastSuccessAttackCoordinate - i*VERTICAL_INCREMENT);\r\n    //         }\r\n    //\r\n    //     console.log('finishing coords:' + this.attackVars.possibleAttackCoords)\r\n    // }\r\n    //\r\n    // processSunkShip() {\r\n    //\r\n    //     //detect ship direction\r\n    //     let lsac = this.attackVars.lastSuccessAttackCoordinate;\r\n    //     let length = 1;\r\n    //     let isVertical = null;\r\n    //\r\n    //     const surroundCoordinateWithDots = () => {\r\n    //         if\r\n    //         (\r\n    //             (humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] === '@' ||\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] === '*') &&\r\n    //\r\n    //             (humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] === '@' ||\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] === '*') &&\r\n    //\r\n    //             (humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] === '@' ||\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] === '*') &&\r\n    //\r\n    //             (humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] === '@' ||\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] === '*')\r\n    //         ) {\r\n    //\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate - 9] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 11] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 9] = '*';\r\n    //             humanField.battleField[this.attackVars.lastSuccessAttackCoordinate + 11] = '*';\r\n    //\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 1] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 1] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 10] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 10] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 11] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 11] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate - 9] = '*';\r\n    //             aIguessField.battleField[this.attackVars.lastSuccessAttackCoordinate + 9] = '*';\r\n    //\r\n    //         }\r\n    //     };\r\n    //\r\n    //     isVertical = () => {\r\n    //         if (aIguessField.battleField[lsac + 1] === 'X' || aIguessField.battleField[lsac - 1] === 'X') return 0;\r\n    //         if (aIguessField.battleField[lsac + 10] === 'X' || aIguessField.battleField[lsac - 10] === 'X') return 1;\r\n    //     };\r\n    //\r\n    //     const  processVertical = () => {\r\n    //\r\n    //             let extremeDeckCoordinate = () => {\r\n    //                 let result = lsac;\r\n    //                 for (let i = 0; aIguessField.battleField[lsac + i * VERTICAL_INCREMENT] === 'X'; i++) {\r\n    //                     result += i * VERTICAL_INCREMENT;\r\n    //                 } return result;\r\n    //             };\r\n    //\r\n    //             let finalDeckCoordinate = () => {\r\n    //                 let result = lsac;\r\n    //                 for (let i = 0; i < length - 1; i++) {\r\n    //                     result -= i * VERTICAL_INCREMENT;\r\n    //                 } return result;\r\n    //             };\r\n    //\r\n    //             function getSunkShipLength() {\r\n    //             for (let i = 1; aIguessField.battleField[lsac + i * VERTICAL_INCREMENT] === 'X'; i++) {\r\n    //                 length++;\r\n    //             }\r\n    //\r\n    //             for (let i = 1; aIguessField.battleField[lsac - i * VERTICAL_INCREMENT] === 'X'; i++) {\r\n    //                 length++;\r\n    //             }\r\n    //         }\r\n    //\r\n    //             function surroundShipWithDots () {\r\n    //\r\n    //                 function surroundExtremeDeckWithDots() {\r\n    //                     aIguessField.battleField[extremeDeckCoordinate - 1] = '*';\r\n    //                     aIguessField.battleField[extremeDeckCoordinate - 9] = '*';\r\n    //                     aIguessField.battleField[extremeDeckCoordinate - 10] = '*';\r\n    //                     aIguessField.battleField[extremeDeckCoordinate - 11] = '*';\r\n    //                     aIguessField.battleField[extremeDeckCoordinate + 1] = '*';\r\n    //\r\n    //                     humanField.battleField[extremeDeckCoordinate - 1] = '*';\r\n    //                     humanField.battleField[extremeDeckCoordinate - 9] = '*';\r\n    //                     humanField.battleField[extremeDeckCoordinate - 10] = '*';\r\n    //                     humanField.battleField[extremeDeckCoordinate - 11] = '*';\r\n    //                     humanField.battleField[extremeDeckCoordinate + 1] = '*';\r\n    //\r\n    //\r\n    //                 }\r\n    //\r\n    //                 function surroundFinalDeckWithDots() {\r\n    //                     aIguessField.battleField[finalDeckCoordinate - 1] = '*';\r\n    //                     aIguessField.battleField[finalDeckCoordinate + 9] = '*';\r\n    //                     aIguessField.battleField[finalDeckCoordinate + 10] = '*';\r\n    //                     aIguessField.battleField[finalDeckCoordinate + 11] = '*';\r\n    //                     aIguessField.battleField[finalDeckCoordinate + 1] = '*';\r\n    //\r\n    //                     humanField.battleField[finalDeckCoordinate - 1] = '*';\r\n    //                     humanField.battleField[finalDeckCoordinate + 9] = '*';\r\n    //                     humanField.battleField[finalDeckCoordinate + 10] = '*';\r\n    //                     humanField.battleField[finalDeckCoordinate + 11] = '*';\r\n    //                     humanField.battleField[finalDeckCoordinate + 1] = '*';\r\n    //\r\n    //                 }\r\n    //\r\n    //                 function surroundMiddleDeckWithDots() {\r\n    //                     for (let i = 0; i < length; i++) {\r\n    //                         aIguessField.battleField[extremeDeckCoordinate() - i * VERTICAL_INCREMENT + 1] = '*';\r\n    //                         aIguessField.battleField[extremeDeckCoordinate() - i * VERTICAL_INCREMENT - 1] = '*';\r\n    //\r\n    //                         humanField.battleField[extremeDeckCoordinate() - i * VERTICAL_INCREMENT + 1] = '*';\r\n    //                         humanField.battleField[extremeDeckCoordinate() - i * VERTICAL_INCREMENT - 1] = '*';\r\n    //\r\n    //                     }\r\n    //                 }\r\n    //\r\n    //                 surroundExtremeDeckWithDots();\r\n    //                 surroundFinalDeckWithDots();\r\n    //                 surroundMiddleDeckWithDots();\r\n    //             }\r\n    //\r\n    //         getSunkShipLength();\r\n    //         surroundShipWithDots ();\r\n    //     };\r\n    //\r\n    //     const  processHorizontal = () => {\r\n    //\r\n    //         let extremeDeckCoordinate = () => {\r\n    //             let result = lsac;\r\n    //             for (let i = 0; aIguessField.battleField[lsac - i] === 'X'; i++) {\r\n    //                 result += i;\r\n    //             } return result;\r\n    //         };\r\n    //\r\n    //         let finalDeckCoordinate = () => {\r\n    //             let result = lsac;\r\n    //             for (let i = 0; i < length - 1; i++) {\r\n    //                 result += i;\r\n    //             } return result;\r\n    //         };\r\n    //\r\n    //         function getSunkShipLength() {\r\n    //             for (let i = 1; aIguessField.battleField[lsac + i] === 'X'; i++) {\r\n    //                 length++;\r\n    //             }\r\n    //\r\n    //             for (let i = 1; aIguessField.battleField[lsac - i] === 'X'; i++) {\r\n    //                 length++;\r\n    //             }\r\n    //         }\r\n    //\r\n    //         function surroundShipWithDots () {\r\n    //\r\n    //             function surroundExtremeDeckWithDots() {\r\n    //                 aIguessField.battleField[extremeDeckCoordinate - 10] = '*';\r\n    //                 aIguessField.battleField[extremeDeckCoordinate - 9] = '*';\r\n    //                 aIguessField.battleField[extremeDeckCoordinate - 1] = '*';\r\n    //                 aIguessField.battleField[extremeDeckCoordinate + 9] = '*';\r\n    //                 aIguessField.battleField[extremeDeckCoordinate + 10] = '*';\r\n    //\r\n    //                 humanField.battleField[extremeDeckCoordinate - 10] = '*';\r\n    //                 humanField.battleField[extremeDeckCoordinate - 9] = '*';\r\n    //                 humanField.battleField[extremeDeckCoordinate - 1] = '*';\r\n    //                 humanField.battleField[extremeDeckCoordinate + 9] = '*';\r\n    //                 humanField.battleField[extremeDeckCoordinate + 10] = '*';\r\n    //\r\n    //             }\r\n    //\r\n    //             function surroundFinalDeckWithDots() {\r\n    //                 aIguessField.battleField[finalDeckCoordinate - 10] = '*';\r\n    //                 aIguessField.battleField[finalDeckCoordinate - 9] = '*';\r\n    //                 aIguessField.battleField[finalDeckCoordinate + 1] = '*';\r\n    //                 aIguessField.battleField[finalDeckCoordinate + 11] = '*';\r\n    //                 aIguessField.battleField[finalDeckCoordinate + 10] = '*';\r\n    //\r\n    //                 humanField.battleField[finalDeckCoordinate - 10] = '*';\r\n    //                 humanField.battleField[finalDeckCoordinate - 9] = '*';\r\n    //                 humanField.battleField[finalDeckCoordinate + 1] = '*';\r\n    //                 humanField.battleField[finalDeckCoordinate + 11] = '*';\r\n    //                 humanField.battleField[finalDeckCoordinate + 10] = '*';\r\n    //\r\n    //             }\r\n    //\r\n    //             function surroundMiddleDeckWithDots() {\r\n    //                 for (let i = 0; i < length; i++) {\r\n    //                     aIguessField.battleField[extremeDeckCoordinate() + 10] = '*';\r\n    //                     aIguessField.battleField[extremeDeckCoordinate() - 10] = '*';\r\n    //\r\n    //                     humanField.battleField[extremeDeckCoordinate() + 10] = '*';\r\n    //                     humanField.battleField[extremeDeckCoordinate() - 10] = '*';\r\n    //                 }\r\n    //             }\r\n    //\r\n    //             surroundExtremeDeckWithDots();\r\n    //             surroundFinalDeckWithDots();\r\n    //             surroundMiddleDeckWithDots();\r\n    //\r\n    //         }\r\n    //         getSunkShipLength();\r\n    //         surroundShipWithDots();\r\n    //\r\n    //     };\r\n    //\r\n    //     switch (isVertical) {\r\n    //         case 1: processVertical(); break;\r\n    //         case 0: processHorizontal(); break;\r\n    //         default: surroundCoordinateWithDots();\r\n    //     }\r\n    //\r\n    //     this.attackVars.lastSuccessAttackCoordinate = null;\r\n    //     this.attackVars.possibleAttackCoords = [];\r\n    //\r\n    // };\r\n    //\r\n    // attackPossibleCoords() {\r\n    //\r\n    //     switch (humanField.battleField[this.attackVars.possibleAttackCoords[0]]) {\r\n    //         case '@':\r\n    //             humanField.battleField[this.attackVars.possibleAttackCoords[0]] = '*';\r\n    //             aIguessField.battleField[this.attackVars.possibleAttackCoords[0]] = '*';\r\n    //             this.attackVars.possibleAttackCoords = [];\r\n    //             break;\r\n    //         case '#':\r\n    //             aIguessField.battleField[this.attackVars.possibleAttackCoords[0]] = 'X';\r\n    //             humanField.battleField[this.attackVars.possibleAttackCoords[0]] = 'X';\r\n    //             this.aiAttacks();\r\n    //             break;\r\n    //         case 'X':\r\n    //             this.attackVars.possibleAttackCoords.splice(0,1);\r\n    //             this.attackPossibleCoords();\r\n    //             break;\r\n    //         case '*':\r\n    //             this.attackVars.possibleAttackCoords.splice(0,1);\r\n    //             this.attackPossibleCoords();\r\n    //             break;\r\n    //         default: alert(\"default case in attackPossibleCoords()\");\r\n    //             break;\r\n    //     }\r\n    //     this.isGameOver(humanField);\r\n    // };\r\n\r\n}\r\n\r\nexport function initFields() {\r\n    humanField = new HumanField();\r\n    aiField = new AiField();\r\n    humanGuessField = new Field();\r\n    aIguessField = new Field();\r\n    gameIsOver = false;\r\n}\r\n\r\nexport let humanField = new HumanField();\r\nexport let aiField = new AiField();\r\nexport let humanGuessField = new Field();\r\nlet aIguessField = new Field();\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}