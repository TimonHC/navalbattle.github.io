{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/other/kern.js"],"names":["kern","SimpleTable","constructor","dict","dataview","p","version","uint16","nTables","offset","tableStart","tables","i","currentPosition","subtable","KernSubTable","push","length","coverage","flags","format","uint8","nPairs","searchRange","entrySelector","rangeShift","Array","map","_","Pair","console","warn","horizontal","minimum","crossstream","override","left","right","value","fword"],"mappings":";;;;;;;AAAA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMF,IAAN,EAAYC,QAAZ,CAAd;AACA,SAAKE,OAAL,GAAeD,CAAC,CAACE,MAAjB;AACA,SAAKC,OAAL,GAAeH,CAAC,CAACE,MAAjB,CAH0B,CAK1B;;AACA,uBAAK,IAAL,EAAY,QAAZ,EAAqB,MAAM;AACzB,UAAIE,MAAM,GAAG,KAAKC,UAAL,GAAkB,CAA/B;AACA,YAAMC,MAAM,GAAG,EAAf;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKJ,OAAzB,EAAkCI,CAAC,EAAnC,EAAuC;AACrCP,QAAAA,CAAC,CAACQ,eAAF,GAAoBJ,MAApB;AACA,YAAIK,QAAQ,GAAG,IAAIC,YAAJ,CAAiBV,CAAjB,CAAf;AACAM,QAAAA,MAAM,CAACK,IAAP,CAAYF,QAAZ;AACAL,QAAAA,MAAM,IAAIK,QAAV;AACD;;AACD,aAAOH,MAAP;AACD,KAVD;AAWD;;AAlB4B;;;;AAqB/B,MAAMI,YAAN,CAAmB;AACjBb,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,SAAKC,OAAL,GAAeD,CAAC,CAACE,MAAjB;AACA,SAAKU,MAAL,GAAcZ,CAAC,CAACE,MAAhB,CAFa,CAEW;AAExB;AACA;AACA;AACA;AACA;AACA;;AACA,SAAKW,QAAL,GAAgBb,CAAC,CAACc,KAAF,CAAQ,CAAR,CAAhB;AACA,SAAKC,MAAL,GAAcf,CAAC,CAACgB,KAAhB;;AAEA,QAAI,KAAKD,MAAL,KAAgB,CAApB,EAAuB;AACrB,WAAKE,MAAL,GAAcjB,CAAC,CAACE,MAAhB;AACA,WAAKgB,WAAL,GAAmBlB,CAAC,CAACE,MAArB;AACA,WAAKiB,aAAL,GAAqBnB,CAAC,CAACE,MAAvB;AACA,WAAKkB,UAAL,GAAkBpB,CAAC,CAACE,MAApB;AACA,yBAAK,IAAL,EAAY,OAAZ,EAAoB,MAClB,CAAC,GAAG,IAAImB,KAAJ,CAAU,KAAKJ,MAAf,CAAJ,EAA4BK,GAA5B,CAAiCC,CAAD,IAAO,IAAIC,IAAJ,CAASxB,CAAT,CAAvC,CADF;AAGD;;AAED,QAAI,KAAKe,MAAL,KAAgB,CAApB,EAAuB;AACrB;AACAU,MAAAA,OAAO,CAACC,IAAR,CACG,kGADH;AAGD;AACF;;AAEa,MAAVC,UAAU,GAAG;AACf,WAAO,KAAKd,QAAL,CAAc,CAAd,CAAP;AACD;;AACU,MAAPe,OAAO,GAAG;AACZ,WAAO,KAAKf,QAAL,CAAc,CAAd,CAAP;AACD;;AACc,MAAXgB,WAAW,GAAG;AAChB,WAAO,KAAKhB,QAAL,CAAc,CAAd,CAAP;AACD;;AACW,MAARiB,QAAQ,GAAG;AACb,WAAO,KAAKjB,QAAL,CAAc,CAAd,CAAP;AACD;;AA3CgB;;AA8CnB,MAAMW,IAAN,CAAW;AACT3B,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,SAAK+B,IAAL,GAAY/B,CAAC,CAACE,MAAd;AACA,SAAK8B,KAAL,GAAahC,CAAC,CAACE,MAAf;AACA,SAAK+B,KAAL,GAAajC,CAAC,CAACkC,KAAf;AACD;;AALQ","file":"kern.5bbe645c.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../../simple-table.js\";\nimport lazy from \"../../../../lazy.js\";\n\n/**\n * The OpenType `kern` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/kern\n *\n * Also don't use this table anymore =(\n */\nclass kern extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n    this.version = p.uint16;\n    this.nTables = p.uint16;\n\n    // getting this data is hilarious, because I'm intentionally not implementing subtable 2\n    lazy(this, `tables`, () => {\n      let offset = this.tableStart + 4;\n      const tables = [];\n      for (let i = 0; i < this.nTables; i++) {\n        p.currentPosition = offset;\n        let subtable = new KernSubTable(p);\n        tables.push(subtable);\n        offset += subtable;\n      }\n      return tables;\n    });\n  }\n}\n\nclass KernSubTable {\n  constructor(p) {\n    this.version = p.uint16;\n    this.length = p.uint16; // length of subtable (including the header)\n\n    // We deviate from the spec here, because it's ridiculous.\n    // The spec says we have a uin16 that represents 16 bits.\n    // Then you read the description of how to treat those bits,\n    // and you realise it's NOT 16 bits, it's 8 bits of which\n    // bits 0-3 are used, and bits 4-7 are reserved, and then it's\n    // a plain uint8 \"format\" value. So that's what we do here.\n    this.coverage = p.flags(8);\n    this.format = p.uint8;\n\n    if (this.format === 0) {\n      this.nPairs = p.uint16;\n      this.searchRange = p.uint16;\n      this.entrySelector = p.uint16;\n      this.rangeShift = p.uint16;\n      lazy(this, `pairs`, () =>\n        [...new Array(this.nPairs)].map((_) => new Pair(p))\n      );\n    }\n\n    if (this.format === 2) {\n      // Wow. Not only does this font have a kern table, it has a kern table that isn't universally supported. Classy.\n      console.warn(\n        `Kern subtable format 2 is not supported: this parser currently only parses universal table data.`\n      );\n    }\n  }\n\n  get horizontal() {\n    return this.coverage[0];\n  }\n  get minimum() {\n    return this.coverage[1];\n  }\n  get crossstream() {\n    return this.coverage[2];\n  }\n  get override() {\n    return this.coverage[3];\n  }\n}\n\nclass Pair {\n  constructor(p) {\n    this.left = p.uint16;\n    this.right = p.uint16;\n    this.value = p.fword;\n  }\n}\n\nexport { kern };\n"]}