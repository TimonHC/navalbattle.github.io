{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/SVG.js"],"names":["SVG","SimpleTable","constructor","dict","dataview","p","version","uint16","offsetToSVGDocumentList","Offset32","currentPosition","tableStart","documentList","SVGDocumentList","ParsedData","numEntries","documentRecords","Array","map","_","SVGDocumentRecord","getDocument","documentID","record","offset","start","svgDocOffset","parser","readBytes","svgDocLength","getDocumentForGlyph","glyphID","id","findIndex","d","startGlyphID","endGlyphID","uint32"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,GAAN,SAAkBC,wBAAlB,CAA8B;AAC5BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMF,IAAN,EAAYC,QAAZ,CAAd;AAEA,SAAKE,OAAL,GAAeC,MAAf;AACA,SAAKC,uBAAL,GAA+BH,CAAC,CAACI,QAAjC,CAJ0B,CAIiB;;AAE3CJ,IAAAA,CAAC,CAACK,eAAF,GAAoB,KAAKC,UAAL,GAAkB,KAAKH,uBAA3C;AACA,SAAKI,YAAL,GAAoB,IAAIC,eAAJ,CAAoBR,CAApB,CAApB;AACD;;AAT2B;AAY9B;AACA;AACA;;;;;AACA,MAAMQ,eAAN,SAA8BC,kBAA9B,CAAyC;AACvCZ,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,UAAMA,CAAN;AACA,SAAKU,UAAL,GAAkBV,CAAC,CAACE,MAApB;AACA,SAAKS,eAAL,GAAuB,CAAC,GAAG,IAAIC,KAAJ,CAAU,KAAKF,UAAf,CAAJ,EAAgCG,GAAhC,CACpBC,CAAD,IAAO,IAAIC,iBAAJ,CAAsBf,CAAtB,CADc,CAAvB;AAGD;AAED;AACF;AACA;;;AACEgB,EAAAA,WAAW,CAACC,UAAD,EAAa;AACtB,QAAIC,MAAM,GAAG,KAAKP,eAAL,CAAqBM,UAArB,CAAb;AACA,QAAI,CAACC,MAAL,EAAa,OAAO,EAAP;AAEb,QAAIC,MAAM,GAAG,KAAKC,KAAL,GAAaF,MAAM,CAACG,YAAjC;AACA,SAAKC,MAAL,CAAYjB,eAAZ,GAA8Bc,MAA9B;AACA,WAAO,KAAKG,MAAL,CAAYC,SAAZ,CAAsBL,MAAM,CAACM,YAA7B,CAAP;AACD;AAED;AACF;AACA;;;AACEC,EAAAA,mBAAmB,CAACC,OAAD,EAAU;AAC3B,QAAIC,EAAE,GAAG,KAAKhB,eAAL,CAAqBiB,SAArB,CACNC,CAAD,IAAOA,CAAC,CAACC,YAAF,IAAkBJ,OAAlB,IAA6BA,OAAO,IAAIG,CAAC,CAACE,UAD1C,CAAT;AAGA,QAAIJ,EAAE,KAAK,CAAC,CAAZ,EAAe,OAAO,EAAP;AACf,WAAO,KAAKX,WAAL,CAAiBW,EAAjB,CAAP;AACD;;AA9BsC;AAiCzC;AACA;AACA;AACA;AACA;;;AACA,MAAMZ,iBAAN,CAAwB;AACtBlB,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,SAAK8B,YAAL,GAAoB9B,CAAC,CAACE,MAAtB;AACA,SAAK6B,UAAL,GAAkB/B,CAAC,CAACE,MAApB;AACA,SAAKmB,YAAL,GAAoBrB,CAAC,CAACI,QAAtB,CAHa,CAGmB;;AAChC,SAAKoB,YAAL,GAAoBxB,CAAC,CAACgC,MAAtB;AACD;;AANqB","file":"SVG.e078bdce.js","sourceRoot":"..","sourcesContent":["import { ParsedData } from \"../../../parser.js\";\nimport { SimpleTable } from \"../simple-table.js\";\n\n/**\n * The OpenType `SVG` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/SVG\n */\nclass SVG extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    this.version = uint16;\n    this.offsetToSVGDocumentList = p.Offset32; // from the start of the SVG table\n\n    p.currentPosition = this.tableStart + this.offsetToSVGDocumentList;\n    this.documentList = new SVGDocumentList(p);\n  }\n}\n\n/**\n * The SVG document list.\n */\nclass SVGDocumentList extends ParsedData {\n  constructor(p) {\n    super(p);\n    this.numEntries = p.uint16;\n    this.documentRecords = [...new Array(this.numEntries)].map(\n      (_) => new SVGDocumentRecord(p)\n    );\n  }\n\n  /**\n   * Get an SVG document by ID\n   */\n  getDocument(documentID) {\n    let record = this.documentRecords[documentID];\n    if (!record) return \"\";\n\n    let offset = this.start + record.svgDocOffset;\n    this.parser.currentPosition = offset;\n    return this.parser.readBytes(record.svgDocLength);\n  }\n\n  /**\n   * Get an SVG document given a glyphID\n   */\n  getDocumentForGlyph(glyphID) {\n    let id = this.documentRecords.findIndex(\n      (d) => d.startGlyphID <= glyphID && glyphID <= d.endGlyphID\n    );\n    if (id === -1) return \"\";\n    return this.getDocument(id);\n  }\n}\n\n/**\n * SVG document record, pointing to a specific SVG document encoding a\n * range of glyphs as <g id=\"glyph{NUM}>...</g> where {NUM} is a number\n * in the range [startGlyphId, endGlyphId].\n */\nclass SVGDocumentRecord {\n  constructor(p) {\n    this.startGlyphID = p.uint16;\n    this.endGlyphID = p.uint16;\n    this.svgDocOffset = p.Offset32; // from the beginning of the SVGDocumentList\n    this.svgDocLength = p.uint32;\n  }\n}\n\nexport { SVG };\n"]}