{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/cmap/subtable.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format0.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format2.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format4.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format6.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format8.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format10.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format12.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format13.js","node_modules/lib-font/src/opentype/tables/simple/cmap/format14.js","node_modules/lib-font/src/opentype/tables/simple/cmap/createSubTable.js","node_modules/lib-font/src/opentype/tables/simple/cmap.js"],"names":["Subtable","ParsedData","constructor","p","plaformID","encodingID","Format0","platformID","format","length","uint16","language","glyphIdArray","Array","map","_","uint8","supports","charCode","charCodeAt","console","warn","reverse","glyphID","getSupportedCharCodes","start","end","Format2","subHeaderKeys","subHeaderCount","Math","max","subHeaderOffset","currentPosition","SubHeader","glyphIndexOffset","low","high","subHeaderKey","subHeaders","subheader","first","firstCode","last","entryCount","preservePropNames","h","lastCode","idDelta","int16","idRangeOffset","Format4","segCountX2","segCount","searchRange","entrySelector","rangeShift","endCodePosition","readBytes","startCodePosition","idDeltaPosition","idRangePosition","glyphIdArrayPosition","glyphIdArrayLength","tableStart","buildSegments","build","i","startCode","endCode","idRangeOffsetPointer","glyphIDs","e","push","s","segments","find","v","includes","code","indexOf","unicode","String","fromCodePoint","getGlyphId","segment","Format6","getter","pos","Format8","uint32","is32","numGroups","SequentialMapGroup","groups","findIndex","startcharCode","endcharCode","startGlyphID","Format10","startCharCode","numChars","endCharCode","Format12","group","Format13","ConstantMapGroup","Format14","subTableStart","numVarSelectorRecords","VariationSelector","supportsVariation","variation","varSelector","uvs","getSupportedVariations","varSelectors","uint24","defaultUVSOffset","Offset32","nonDefaultUVSOffset","createSubTable","parser","cmap","SimpleTable","dict","dataview","version","numTables","encodingRecords","EncodingRecord","getSubTable","tableID","table","getSupportedEncodings","r","encodingId","recordID","subtable","glyphid","char","some","t","offset"],"mappings":";;;;;;;AWAA,ADEA,ATFA,AKAA,ACAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,ALAA;;AWCA,ADEA,ATDA,AKDA,ACAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,ALCA,MCAMM,ADAAN,OCAN,CDAA,QCAsBA,CDACC,iBCAvB,CAA+B,ADA/B,CAAkC;ACChCC,ADAAA,ECAAA,ADAAA,WCAW,ADAA,CCACC,ADAAA,CCAD,ADAA,ECAII,ADAAH,SAAJ,CCAA,CDAeC,CCACA,SDAhB,CCAA,CDA2B,CCAC;AUDzC,ADEA,ATAI,ADAA,UCAMF,ADAAA,CCAN,ADAA,ECASI,UAAT,EAAqBF,UAArB;AACA,ADAA,SCAKG,ADAAJ,MCAL,GAAc,ADAd,CCAA,EDAiBA,SAAjB;AUAJ,ATCI,AKHJ,ACAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,ALGI,MQHEqG,ACAAE,APAAhF,ACAAwB,ACAAmC,ACAAG,GJGGhF,ADAAJ,IEHT,ACAA,ACAA,ACAA,CGAA,ACAA,CRGI,GAAcF,CAAC,ADAf,CCAgBO,ECHEV,ACAAA,ACAAA,ACAAA,ALGAK,CQHCL,ACAAA,GRGnB,MDAA,QEHJ,ACAA,ACAA,ACAA,CGAA,ACAA,APA+B,ACAA,ACAA,ACAA,CGAC,ACAA;ARI5B,AKHJ,ACAA,ACAEE,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,ALGC,EQHDA,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,ICAIiG,ACAAI,GNGG5F,IOHI,ACAA,APAA,ACAA,ACAA,ACAA,CCAb,ACAA,ACAcR,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,CGAD,ACAA,APAA,ACAA,ACAA,ACAA,EJGT,AOHaI,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,GJGGJ,CAAC,CAACO,CKHCV,ACAAA,ICAV,ACAA,APAA,ACAA,ACAA,ACAA,CJGT,CAJqC,AOCZK,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,CJIzB,SOJS,ACAA,APAA,ACAA,ACAA,ACAA,ECAb,ACAA,ACAyC,ACAA,APAA,ACAA,ACAA,ACAA,CCAT,ACAA;AIAhC,ADEA,AJDEH,ACAAA,ACAE,ACAA,APAA,ACAA,ACAA,ACAA,ECAFA,ACAAA,QCAQC,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,CGAN,ACAA,APAA,ACAA,ACAA,ACAA,ECAS,ACAA,ACAAI,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,CCACJ,ACAAA,CDAD,ACAA,EDAII,ACAAA,MCAb,ACAA,APAA,ACAA,ACAA,ACAA,EGAqBF,ACAAA,APAAA,ACAAA,ACAAA,ACAAA,ECAZ,ACAA,EDAgBA,ACAAA,MCAzB,ACAA,APAA,ACAA,ACAA,ACAA,ICAS,ACAA,EDA4B,ACAA;AIAzC,AVII,AKHA,ACAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,ALJ8B,SCOzBO,AOHAJ,ACAAoG,APAApG,ACAAA,ACAAA,ACAAA,CCACL,ACAAA,CDAN,ACAA,EDASI,ACAAA,ECAT,ANAA,ACAA,ACAA,ACAA,GGAc,ANAA,ACAA,ACAA,ACAA,CHAd,ACAA,ACAA,ACAA,CGAA,CPGA,CQHA,CHAA,ACAA,CNGoB,CAAC,AKHAF,ACAAA,AEAAF,CAAC,CAAC8B,CRGC,IAAIpB,GKH5B,ACAA,ENGwB,CAAU,GAAV,CAAJ,AQHpB,ERGwCC,GAApB,CAAyBC,CAAD,IAAOZ,CAAC,CAACa,KAAjC,CAApB;AUHJ,ADCA,ATGG,AKHC,ACAA,ACAAb,ACAA,APAA,ACAA,ACAA,ACAAA,IGAAA,AHAAA,CGAC,AHAA,CGACO,AHAAA,GCAGF,ACAAA,AEAAA,APAAC,ACAAA,ACAAA,GIAL,AHAA,GCAA,ACAA,AEAA,APAA,ACAA,ACAA,GEAc,ACAA,AEAA,APAAN,ACAAA,ACAAA,CFAC,ACAA,ACAA,CEAf,ACAA,AEAA,APAgBO,ACAAA,ACAAA,MFAhB,ACAA,ACAA;AOAJ,ALCIP,ACAAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,ICAAA,ACAAA,CDAC,ACAA,CDACO,ACAAA,GCAGD,ACAAA,APAAE,ACAAA,ACAAA,ACAAF,GCAL,ACAA,GCAA,ACAA,AJAA,EHAA,ACAA,ACAA,CIAcN,ACAAA,AJAAA,CGAC,ACAA,AJAA,CGACuF,ACAAA,APAAvF,ACAAA,ACAAA,ACAAuF,CHAC,ACAA,ACAA,CFAChF,ACAAA,ACAAA,IIAlB,ACAA,AJAA,EHAA,ACAA,ACAA;AOAJ,ADAA,ATIEO,AKHE,ACAA,ACAA,ACAA,APAA,ACAA,ACAA,ACAA,EJGFA,OKHOR,ACAAA,ACAAE,ACAAkG,APAAjF,ACAAwB,ACAAV,ACAA/B,CJGC,CAACO,IKHP,ACAA,ECAA,AHAA,CCAcf,ACAAA,AHAd,CHGM,AKHS,ACAA,AJAf,CGAgBuF,ACAAA,ACAAvF,AHAAA,CJGC,AOHA,AJAAA,ACAA,CGACuF,ANAlB,ACAkBvF,ACAA,ACAAuF,CFAC,ACAAhF,CDACA,CDAC,CIArB,ACAA,ALAsB,EMAtB,AHAA,CHAyB,AEAzB,CKAA,ANAA,GMA6BP,APAAU,COAC,CAAC6E,GPAN,CAAU,EOAnC,CPAyB,CAAJ,EAAoB5E,GAApB,CAAyBC,CAAD,IAAOZ,CAAC,CAACO,MAAjC,CAArB;ASAJ,AVII,AKHA,ACAA,ACAA,ACAA,APCA,ACDA,ACAA,ACAA,QJGIQ,CKHCP,ACAAA,ACAAiF,ALAAvC,ACAAT,ACAA+C,CHCC9D,GGDN,GJGY,AIHA,CJGCV,AKHb,ACAA,AJAA,AEAa,CGAb,CJAA,CEAgBhB,ACAAA,AJAA,AEAA,CCAC,ACAA,ACAAA,CFACuF,ACAAA,ACAA,AJAAvF,CIACuF,ACAd,ALAc,CFCC,AEDAhF,ACAAG,CFACuC,EFGrB,AQHA,APCuBtB,CIDvB,ACAA,CNGyB,AOHzB,ACAY,AJAI,CDAhB,ACA0B,CHCC,CAACC,EGDZ,CHCO,ACDP,AEAJ,CHCoB,CGDCjB,CFAC,CDCC,ACDnC,CEAY,CAA0BC,CAAD,CIArC,CPCwCa,CODb,CJAiBzB,CAAC,CAACa,GIC5C,CAAC,CJDS,CAAZ,CICM,EPAiB,CAAvB,COAUH,KAAJ,CAAU,KAAKgG,qBAAf,CAAJ,EAA2C/F,GAA3C,CACGC,CAAD,IAAO,IAAI+F,iBAAJ,CAAsB3G,CAAtB,CADT,CADF;AEAJ,ADDA,ATKM,AKHF,ACAA,ACAA,ACID,APFC,ACFA,ACAA,ACAA,SCAKiG,ACAAR,AJAAtC,ACAAP,ACAA6C,CGACL,ANEAvD,MMFM,CJAZ,CGAA,AFAA,CGAe,CAAC,ALAhB,ACAgB,CGAC7B,AFAAA,CCAjB,ACAkB,AFAA,CEACuF,ACAA,ALAAvF,AEAAuF,CFAC,CGACvF,AJEA,ACFAO,ACAAgC,CEAC,CAACgD,AEAA7E,CNECV,CKFxB,ALEyB,AGFzB,CHE0B8B,CCF1B,CKAmB,CFAnB,AEA6B,CJAb,GAAiB,CIAC2D,IJAIhD,GFEtC,EMFmB,CAAJ,EAA+B9B,EJA9B,CIAD,CACZC,CAAD,AJDiD,CAAnD,GICS,IAAI2F,gBAAJ,CAAqBvG,CAArB,CADM,CAAf;AGAJ,AVIMe,AKHF,AEEA,ANAA,ACFA,MQDEyG,AVIAzG,GKHGmF,AHAA9C,CQDT,IVIc,GAAG,AKHb,CLGc,CUJCqE,AVIb,CKHczH,CAAC,CAACuF,AHAlB,CKEK,ANAA,ECFgBvF,CAAC,CKEtB,ANAA,ACFuBO,CGAvB,CEEY,ANAA,ICFZ,IKEA,EAAqB6E,ENArB,ESHJ,ATG6B,CSHE,CHG3B,INA+B;ASFjCrF,ADFF,ATMMkB,AKHF,ACDA,ACGD,ACEDH,APFId,ACFF,ACAA,ACDA,EMAFD,AFKAe,IRDIG,ACDAjB,CAAC,CAAC8B,CIFCqE,AHAA9C,CIDC+B,AEKA,ALJAA,ACDAA,GMAG,AVIA,AQCA,CELCsC,AVIAxG,EMJE,AHCA,ACDA,EMAH,AVIP,CACG,AMLU,AJCf,ACAe,ACDA,CMACyG,ALChB,EHAkB3H,CGAC,AJEjB,ACFiB,CAACO,CIAlB,AHAmB,ACAnB,CEAC,ALEmBsB,AEFA,ACAnB,EMDM,ALCeoE,CCAlB,AHAmB,ACAnB,CMDoB,ARC1B,CATqC,CAWrC,CIFUvF,AHAmBA,ACAnBA,KEAJ,AHAmB,ACAnB,CEAU,AHAmB,ACAnB,ECAG,AJEjB,GIFsC,ACAnB+E,AHAmBhD,ACAnBgD,KCAwBS,ICAvC,AFAA,CEAJ,AHAuB,ACAvB,CDAmB,CGAYvF,AFAAA,CCAjC,AFAqDA,EGAnD,AFAA,CEAoCC,AHAjB,ACAiBA,CEAD,AHAqBA,ACArB,CDAoB,GGAb,AFAA,CDAoBZ,CAAC,CAACO,CGAlBmF,AFAAA,KDA3B,CAArB,YGA4C,AFAA,CEAuB1F,AFAAA,CEAvB,AFAA,CEA1C,AFAA,CEDF,AFAA,2BJIE;AUHF,AVMC,AQDDiB,APFE,ACAF,IMEAA,MELM,CFKC,CAACC,CPFC,CAAC,EOEV,CAAc,APFD,IAAIR,KAAJ,CAAUgB,cAAV,CAAJ,EAA+Bf,GAA/B,CAAoCC,CAAD,IAAO,IAAImB,SAAJ,CAAc/B,CAAd,CAA1C,CAAP,COEF;AELQA,ADbZ,AJcI,ACAA,ACGFc,ACEE,APFC,AEHD,ACAA,EGGFA,GNHE,CSDQd,ILCFoF,AEGA,CAACrE,ACEA,CAAP,IHLY,GAAG,AEGT,EAAW,EDHZ,AHAA,ACAA,ECAgB,CAAC,CCAtB,AHAA,ACAA,ECAyB,ACAb,AHAA,ACAA,ICAiBL,ICA7B,AFAA,CCAyB,CAAU,ACAd0E,AFAAA,IDArB,CEAwCc,CCAxC,AHA2Bd,ACA3B,MDAA,CEAyB,CAAJ,EAA8BzE,GAA9B,CAAmCC,CAAD,IAAOZ,CAAC,CAACO,MAA3C,CAArB;AKDM,AVON,AMLD,ACGC,ACED,APDC,ACDA,ACHD,ACAA,QMFe,AHKVQ,ENCEiB,ACDAsB,CFEC,GUPaoE,EVOR3G,AOFA,CAACC,CGLC,EAAY2G,IVOnB,CEFc,CDCC,CMDtB,CGLc,AVOU5G,AEFAf,CQLxB,AHKyBe,ANCAc,ACDA,CAACC,MFEM,COFC,GPEG,AOFAf,GPEpC,CCDwC,CCDxC,EDC2CW,CMDC,CAACV,UAAT,CAAoB,CAApB,ANCqB,CMDhC,CADR,CAC2C,ANCA,CAA5D;ASLA,ADFJ,ATSG,AKNC,AJKA,ACDA,SQLK4G,OAAL,GAAe5H,CAAC,CAACO,ELCZ,AJKA,ACDA,IQLL,ALCA,AJKA,ACDA,EGJY,AJKA,ACDA,QGJZ,CHIA,CGJqB6E,CHIC,KGJtB,CJKA,ACAEpF,CAAC,CDA2B,ACA1BuD,MDAgC,GCAlC,CAAY,KAAKL,QAAjB,EAA2BI,eAA3B,EAA4C,EAA5C,CADF;AQJA,ADFJ,AJGG,ACCDxC,ACEE,ACGFO,APDIrB,ACEF,ACNFc,ACAAA,EEAAA,AEKAO,ALLAP,ACAAA,IHIId,CAAC,CAAC8B,CSNC+F,CJEC,AJMArE,ACNA,ACAA,CEACzC,ACGL,AJHKA,ACAAA,KGGA4E,EGLP,CJEM,AHAA,ACAA,EMFW3F,AJEA,AHAA,ACAA,CMFC,AHKhB,CGLiBO,AHKLqF,ACEK,APDjB,GOCoB,APDA5D,CCEC,EQRvB,CRQ0BsB,EKHxB,CACGiB,CAAD,IAAOA,CAAC,CAAC0B,ENAX,GCEuC,GAAG,CAAlB,GAAsB,CKFrC,IAAmBlF,ALEuBkC,QKF1C,ELEX,EKF0ClC,QAAQ,IAAIwD,CAAC,CAAC4B,WADtD,MAEM,CAAC,CAHT;AGHA,ADFJ,ATSEhF,AMLE,ACMD,ACDCF,APDE,ACEF,ACNA,ACAA,EJKFE,EQAEF,IFLIF,AHAAA,ACAAA,CMFC+G,AVOA,CAAC1G,CQAC,CAACF,CPDC,CAAC,EKJE,AEKZ,ALLY,ACAA,CJKP,AMLQF,AEMV,APFU,AEJAA,ACAAA,EJKE,ECDEN,ECEZ,CQRL,ETMa,CSNU,AJEvB,ALIuBgB,ACEvB,ACNA,ACAA,CMFwB,CJECX,AJMb,ACNa,ACAA,EMFE,IAAIL,EJEE,GIFN,AJESK,AJMpC,CQRqC,ATMxB,CAAJ,ACEe,EDFgBJ,ESNEkH,CTMjC,CKJmC,ALICjH,ACG3CZ,CIP2CgB,ALID,ACGzC,CAACuC,GDH+CvD,CAAC,CSNzB,ATM0BO,CSN9B,EAA+BI,CJElB,AJOlC,CIPsD,AJO1C,CQTS,AJEa,ALI3B,CSLNC,AJCsB,ALIvB,CSLA,AJAe,CAGjB,CJKmBsC,EQRV,IAAI6E,ERQX,EAA2BvE,SMF7B,CENS,CAAmBxD,CAAnB,EAAsB,GRQ7B,EQRkC6D,ARQY,EAA9C,CADF,OQPS,CADc,CAAvB;AAGD,ADJH,ATSI5C,AKNFH,AGQE,APHC,ACKD,ACTE,ACAA,ECDJA,ELMEG,CCJA,KIFM,AHUAwC,CFJC,AKNA1C,AGQA,CRFCG,CQER,GRFA,CAAc,EKNR,EAAW,IHUI,GAAGsC,iBAAiB,GAAG,KAAKP,UAAjD,MFJA;ASRJ,ATSI,AKNA,ACEA,ACKF9B,ACCC,APHA,ACKC,ACTEJ,ACAAA,EGMJI,IJNIJ,ACAAA,ECDEA,ACEA,CCKC,CAACK,CPDC,EAAP,CGLU,ACAA,ECDE,CAACJ,AEOR,AJNQ,ACAA,CECCD,AHDA,ACAA,CGMC,AJNb,ACAA,IFUA,GITE,CDFJ,AHUA,EGVyB,AHYtB,CIVuBA,QAAQ,AJQlC,EAGE,EIXoC,IJW9Bf,CAAC,CIXT,AJWUuD,EIXoC,OAAO,AJW7C,CIXsC,AJW1B,CIfH,CAMjB,GJSyBL,QAAjB,EAA2BO,eAA3B,EAA4C,EAA5C,EAAgD,IAAhD,CAHR,CAG8D;AQXhEuE,ADJa,ATSZ,AKNG,AEOF/G,ALEA,ACREA,ACAAA,EMAJ+G,EHME/G,EJNEA,ACAAA,GKJkBqG,EFUb,CAACpG,CGNC,APAA,ACAA,CMAC+G,APAA/G,ACAAA,EGMV,CAAc,CJNZ,ACAA,CDCG,ACAA,EMDI,EAAU,ADJR,CAAwBqG,MAAxB,EAAgCnH,UAAhC,EAA4CF,UAA5C,EAAwD,cFUnE,gDJNE,ACAA;AMCF,ADJF,AJGIa,ACGF,ACIA,ACCFI,APHAL,ACSE,ACXC,ACAA,EIKHK,APHAL,IILIC,EIHEV,AHMA,CAACU,AEKA,CAACK,APHA,ACSAsC,CQbC,AHMA,ANFA3C,EMEP,CEVU,AJGA,EKCE+G,CDJCP,AJGA,ACGA,AEKR,CHRS,CAAZ,AGQa,APHT,CKFU,CLEC,EQRE,CAAChH,CPiBC,CIXjB,EJWoBkD,EOjB1B,CCIS,CAAqBwE,AJEA,MAAxB,CIFG,EAA8BC,CJEC,CAACnH,AJWA,GQbvC,ARa0C,KIXK,AJWAkC,GIXG,MAAZ,CJWtC,KIX8D,MAA9D,EACE,OAAO,CAAP;AIFH,ADJD,ATSA5B,AKNIJ,ACKF,ACED,ACCCA,APHA,ACSA,EFRFI,EQEEJ,ECXEZ,AJGAY,EJKEF,GKCF,AEEK,CCXC,ADWAG,CHRC,CAACA,ECMHyE,AEEP,APHY,CQRC,ADWC,APHD3E,CQRf,AJGI,CACG,CIJW,EHSd,CNAiB,AMAL4E,AJQT,GFRiB,CSTC,ARQvB,ACSA,EDTyB,ACSb,EOjBezF,CHSzB,CACGoE,CAAD,IAAOA,CAAC,CAAC0B,IJOb,EOjBuB,APiBK,COjBOsB,KPkBjCvH,COlBqB,AHUZ,AJQR,CAACuD,COlBuCnD,EHUbW,MJQ5B,CAAY,COlBS,AHUZ,EGV4Cb,EHUba,AJQvBmC,CMPnB,OCXuB,AHU2B,AJQhD,COlBc,CPkBaQ,EIRyBa,CAAC,CAAC4B,WADtD,AJSA,EAA4C,EAA5C,CADF,CINQ,CAAC,CAHT,iBDLE;AIFJ,ATSE,AKJC,ACOF,AEDC,APHE,ACYF,ACfA,ACAA,MKLE9F,ENKEU,EDeE4C,CFXC,AQEA,AJLL,CKNM,ATSA,CQER,GLNY,ACCLgC,CKNM,CAAf,CNKiB,CMLC,ELMd,CAAYC,CDDMrD,GMLG,GPoBG,COpBCf,CLMzB,CFc2BkC,ACf7B,ACEKa,CAAD,CDF2B,GCEpBA,CAAC,CAACsB,EDFyB,EAAP,GMLR,CAAY0B,APoBS,GAAG,EEbpC,CKPY,EAAoBnH,APoBS6C,CEbtBlC,QAAnB,CKPY,APoBvB,EOpBuDb,CLOba,QAAQ,CKP3B,CAAP,ELOsCwD,CAAC,CAACuB,WADtD,MAEM,CAAC,CAHT;AMAFqC,ADJA,ATQY7G,AOEZD,ACCC,APHGN,ACYF,ACfA,ACID,EMLDoH,AHMA9G,IEVIhB,ATQQiB,ACARP,EEHEA,EDeE6C,CFZS,CSRP,CTQS,CAAT,ACAE,EEHE,CMLC,ARQA,CQRf,ARQgB,CAAZ,AEHa,CMLC,GCIG,AHMA,CAAClB,AJLAH,EODE,CDJC,CPoBC,GOpBGS,APqBzB,EChBa,GDgBR1C,AChByB,KIKK,AJLAmC,CDgBnC,EKXsC,ELWvBkB,COrBM,CAAY4D,CFUhB,EAA4B,AJL/C,EAAiD,CML1B,EAAoBnH,INKa,EAAP,IML1B,APqBc,EOrBkBF,CPqBf,KAAK2D,IOrBtB,CAAP,KPqBd,CADF;AQfA,ADJF,ATOsBtC,AKHpB,ACQFJ,ACFE,ANFEF,ACaF,AChBA,EGOFE,IGZId,ATOkBkB,ACClBN,EIJEF,AEMA2B,CPHmB,AMKlB,CAACtB,AHPAwD,CODC,AVGkB,CSPjB,CRQC,CAAC1D,AEHA,EODE4G,ALAA,CIJC,AHYR,AHPQ/G,CMLf,ARQI,CIJa,ACQA,ALHV,CQTW,GPqBX,CGjBekF,CEMpB,AJLqB,EMLE,AFUA,ALWvB,CChBwB,CDgBZ,EQjBL,ADJoBd,CCICxE,CPCC4B,CIKC,CGNvB,CAA0B6F,CAAD,ALAhC,EAAmC,AEMAzC,GGNK,APCxC,CDgBA,EKXuB,ALWI,CGjBe,CIJnB,CAAY4B,GJIA,AHkBjCvH,CAAC,CAACuD,COtBmB,EAAoBnD,MPsBzC,CAAYwD,GOtBS,EAAgC1D,UAAhC,CAAP,EPsBd,EAAgCyD,oBAAhC,EAAsD,EAAtD,CADF,EAvCqC,CA2CrC,ODjBE;ASHAvD,ADJJ,ATMU,AKFR,ACQA,ACFA,ACCFwG,APDG,AELD,ACIFzF,EIEAyF,AJFAzF,GJHS,CUFLf,ADJAC,ATMF,EKFIU,CCQC,AFHA,CAACK,CGCC,AJLA,CMLC,CHYCiF,GIRG,ALAA,AEMAV,CEVC,ALSR,CMLSyC,ADJhB,AHYE,CIRe,ALAA,AGOA,AJFA,CMLChI,ADJA,ADWAyG,EFCE,ACFX,CAAYlG,CFNCsF,EEMb,CEVgB,AHYAN,ACFCjB,CAAD,CCCR,CERyB,CDHbY,ADWA,EFC3B,ACF+B,EDEA,EDRhB,GAAqB,KAAKY,EIJlB,CAAYqB,KJInC,CIJuB,CJI4B,CIJRnH,MJIe,IIJnC,CJI4B,CIJIF,UAAhC,CAAP;ACKdmI,ADJJ,ATMC,AKFC,ACQE,ACFA/G,ACCF,ANaA,ACpBSsD,ACKT3D,IAAAA,EMLEoH,ADJAhI,AFUAiB,AJNOsD,EKOLF,CAAC,CFCCpD,AHRC,CEAAP,AEMA,AHDA,CKTC,ADWA,AJFAG,CGCCwD,CAAC,CDEC,ACFAuB,CGNC,ANKZ,CKTa,ADWAa,AJFC,CMLAsB,AJQA/B,CIRC,ADJjB,AJIiB,CKACnG,CDJC,CJIC,CCQC,AJYd,CIZe6F,GDRGE,AHoBvB,COxBwB,AFSO,ACEvB,CAAiBxB,ANab,GOxBgBuB,CDWpB,CAAuBe,EFC7B,CED4B,ENa9B,CGpBA,CGOuCA,ANahB,GMbmB,CAACD,ENczC,EOzBsB,CAAaS,EPyB9BzD,IOzBiB,ADWe,ECXM1D,GDWcyG,INczD,CAAmBnD,EOzBG,CLSxB,CKTyDxD,ADWjD,CAAR,SCXwB,CAAP,APyBf,EAAoCyD,oBAApC,EAA0D3D,CAA1D,CADF;AQtBwC,ADD1C,AJIC,ACQG,ACFAuB,ACCF,APDA,ACgBD,ACvBgBuD,ACMf,KMRgC,CAAzB,ADDLzE,AFUAkB,AJPauD,COFf,EHSK,CDECxD,ALFAW,CMACyC,ACCAA,AJFA,CKTC,AFUA,ACCA,CDDCyB,ANAA,AEPa,ACMtB,EEGW,AEDAzB,ALRaK,CKQhB,APDIhE,CQVC,CHYCK,CGZhB,ADWiB,ECXE,ANGa,CAAC4D,EKQ/B,APDoB,CKElB,EAAqB,CGZC,ARUA,IQVIoB,ARU5B,GEPwB,CAAqBxB,IAArB,SMHA,CAAa2C,MAAb,EAAqBnH,UAArB,EAAiCF,UAAjC,CAAP;ACKlB,ADJD,ATxB6B,AMoCzB,ACL6B,ACIhC,APDC,AERO,ACOR,KGFwB,AJLvB,CMFEG,AFOK,CAAP,GDKMiB,ALFAY,EQVE,ERUE,CKEC,EGZE,ARUAnB,EQVf,CHYkBK,CGZC,IRUI,EKEnB,CGZsB,CHYC,ALFA,GQVGkF,GRU5B,CKEgCD,KAAK,CAACJ,OGZd,CAAasB,KHYZ,CGZD,EAAqBnH,UAArB,EAAiCF,UAAjC,CAAP;AACnB,AJIAiB,ACQI,ACFH,ANAC,ACgBF2C,ACxBC,EEED3C,AHsBA2C,IO1BIzD,GJIG,CAACe,ACQAG,ALFAY,EQVE,CHYC,EJcE,CIdCb,AJcAoC,CO1BC,AJIR,EIJP,AJIiB,EIJE,AHYA,CLFC,GKEG2C,ALFA,GQVG,EHYE,ALFAjE,CKEC+D,AJchB,CO1BiBK,CP0BC7C,ODhBR,CAAgBzB,CKEhB,GAAoBmE,ALFpB,CAArB,GQVwB,CAAakB,AHYS,CAACtB,EJcpC,EAAwCjG,CO1B3B,AP0Bb,EO1BkCI,AP0BS,MIdrC,CAAf,GGZsB,EAAiCF,UAAjC,CAAP;ACKnBmB,ADJA,AJIEJ,ACQE,AEDJ+F,APDE,ACgBA,AEjBF3F,EMLAA,AFOA2F,AJFA3F,ECLEJ,KIJK,CHYCM,ALFAc,ACgBA0B,CO1BR,AJIS,CAAC7C,CCQC,EJcE,CGtBX,ACQYE,CDRE,CHsBA,CDhBC,ACgBAR,CAAD,EDhBI,ACgBAoD,CQtBC,AJQjB,AJcY,AEjBK,CMLC5D,AFOA,AJFAsC,CEGC,EEDE,APDAN,CCgBC,MQtBL,EAAalC,CTMd,CAAgBiC,GGDG,GAAG,EMLrB,EAAyB,CNKzB,CHCD,CAAlB,AGD+C,mBCL/C;AKCA,ADJH,AJIG,ACQE,ACtC0B,ACqC5B,APDA,ACgBE,ACxBJhB,ACOE,EDPFA,MCOMuB,CDPC,COEC4F,ATMAhG,ACgBA2B,ACxBA7C,CEEC,AGOA,CFCCwD,CDRR,EJMW,CKEC,AEDAqC,CLTP,COES,ATMA5E,CKECgE,AJcA,ACxBA,EOEE,CRsBC,EIdE,CAACJ,AFHrB,CMLsB6B,CTMC,ACgBA7D,AEjBA,CIEhB,APDiB1B,COCC5B,GAAlB,CAAuB+D,CAAD,AJFC,EFiBZ,CDhBlB,ACgBiCV,CIdlB,AEDqBU,ANelB,CMfmB,ANenC,AEjBiCiB,CIEGmB,CEPrB,CAAqBlB,AJQAxE,GFHf,IEGsB,EIR5B,AFOV,CENJgH,AJO6C9G,AEDhD,CENE,IAAO8G,AJOM,CIPL,AJOR,CIPShI,UAAF,KAAiBA,UAAjB,IAA+BgI,CAAC,CAAClI,UAAF,KAAiBA,UADxC,CAAjB;AAGA,ALFD,ACQG,AEDH,APDC,ACeE,ACvBF,ACOA,QMHIoI,APJAjD,EFQE7C,ACgBF0B,CCxBG,ACOA,EEGE,CLFC,AERA,EOIE,ANGAyB,CHCCrD,ACgBF,ECxBI7B,CDwBD,CQpBG,CAAC,ATIA,AGDX,CMHP,ANGmBE,EMHE,ATIA0B,ACgBF6B,CEjBZ,CAAiBQ,CAAD,GDPb,COIkB,ARoBd,ACxBcG,CDwBDb,AEjBI,CHCD,ACgBhB,CDhBiBvB,ACe7B,EQnBmB,EPJX,CAA0BrB,KFQpC,EERU,CAAV;AOKA,AJKWwD,ALDX,ACcE,ACtBF,ACOEtD,MAAAA,EEESsD,AHTPS,EOIEkD,ARoBF1F,CDhBGP,AERA,ACOA,CEEE,CFFAoC,CDPC,ACOA,CDPC,ACOAmB,CHCC,AERZ,CDwBW,CQpBG,APJA,EFQE5D,ACgBF,CQpBG,ETIV,ECgBYY,ACxBE,COICmF,CTIC/F,CGFQ,EHEL,AERAM,EDwBZ,CAAayB,CDhBGxB,ACgBhB,CAFZ,EQlBe,CAAiB8F,ATIlC,CERqB,GAAiBjD,GAAxB,COIG,CAAjB;AACA,ALFFhE,ACMmByD,AEvCW,APuC7B,ACaG,ACrBH,ACOGvD,ECLJF,IDKIE,EECeuD,CFDZ,CFiBD/B,CQpBGwF,ANGA7D,CAAC,CAACoB,EECe,EAAEf,EIJX,CAAC1D,GLFG,ACMa,AJgBf,CGtBGqB,ACMasC,EJgBb,KAAKjC,MIhBC,CAAqB6B,GIJxC,ALF8B,CCMX,CIJ1B,CLFwC,AHsBpB,CAAmBZ,CAAnB,CAHlB,EGnBiB,EAA4B;AKGhD,ALFC,ACKS,ACFb,ALeM,AEhB6B,KAAR,CGCrBuC,AHDK,CEGL,AFHF,CCFI7D,EHsBAyB,YKnBR,CAAuB,EFHnB,EAAuB,GHsBC,GAAGT,eAAe,GAAG,IAAIM,CAJ/C;AGjBA,ACKD,ACFHjE,ANGAoB,ACWI,ACnBJE,ACOC,EGFDtB,ANGAoB,AERAE,OFQO,CAACD,ACgBFgD,GGtBK,AEGA,CFFL,AEEMpE,CAAD,EAAI,ANGR,CCgBO,CDhBG,ECgBA,EALb,ACnBiB,CDkBK,AClBJ0C,CD0BlB,gBC1BmC,GAAG,KAArB,EAA4B;AOKjDvB,ALFQ8E,AEGN,ANGAhF,AERA,EOIFE,ETIEF,IINMgF,AFFFvD,COIC,AHCAuD,CGDCuC,CTIC,CAACtH,IAAR,CSJK,ATIS,ESJC,ELFI,CEGnB,CFHqB,EEGAlB,AJLrB,CIKsB,CAACuF,AJLA,CEEGU,KEG1B,QFHI,4BJMJ;ASHA,ALHyCE,ACKzC,ACDA,ACCJ,APEI,ACiBE,ACzBA,ACnCyB,MIyCzBQ,EHLuCR,CKGpC,AHCAA,CLoBCpD,CInBC,ALEA,ESJEiB,AJET,ALEA,AERS,COIC,APJA,GOIG,CAAb,CLHoD,CKGpCA,AHChB,CGDiB,ALHqC,EEInChE,ACCvB,ANmBuB,CQrBC,AHCA,ACCA,CDDCuF,CFJsCY,EHwBnC,CQrBC0B,ARqBvB,EKpBF,ALoB2B,OQrB3B,EAAoC7D,CAAC,EAArC,EAAyC;AACvC,ALJE,ACML,ACDC,ACCFjE,APEC,ACiBK,AC1BQwC,EKOdxC,KHPW,CAAP,AFAUwC,CIMPnB,CGDCwD,GFEG,ANmBA,CQrBC,AFEA5E,CAAD,CDDT,CGDa,AFEA,ANmBAgE,AC1BQ,CD0BP,CKpBChE,AJNQ,CIMP,CAACuF,ALoBAtB,CQrBC+D,EPLUzF,GIM5B,GLoB0B,GQrBb,ARqBgBM,AC1BnB,COKoBmB,CAAjB,EAAoB7C,GRqBxB,EAA6BkD,CAAC,CQrB1B,CAA4BmE,CRqBCtE,MQrB7B,CAAX,ARqB+C,GAAGrB,OAAhD,EAAyDmB,CAAC,IAAIK,CAA9D,EAAiEL,CAAC,EAAlE,EAAsE;AQpBxE,ALHD,AEIF,ACCC,ANmBMI,AC3BiCxB,QAAAA,CKQlCkE,CEFClC,ARqBAR,IQrBJ,EAAU,APNmC,ED2BjC,AC3BmC,CD2BlCE,CMnBf,GEFmBM,AFEA5E,ANmBb,AC3BgD4C,CKQlC,ANmBAoB,CMnBCkD,ANmBf,EQrBM,IFEZ;AEDC,AJEH7F,AEAE,APEFA,ACiBO,AC5BK,EGSZA,ALEAA,KEXW,CAAP,CKSG8F,cFAc,ALEA,CKFCzE,ALEAA,COFpB,GAAwB1C,CAAC,CAACoH,QAA1B,GFAqC,ALEA,GKFG,ALEA,KKFrB,ALEA,EKF4B,ALEA;ASHhD,ALJC,ACMA,ACRmB,ACQnB,APEA,ACiBG,AC5BF,ACOL,MAAM1B,CFiBA,CIfEhD,ALEAA,ACmBF,CMrBG2E,EHNE,CAAC,YDIZ,CEEI,ALEA,AGJqB,EEEE,ALEA,COFvB,GAA2BrH,CAAC,CAACoH,CFAC,KAAKzB,EEAnC,IFAuB;ADNbrE,ACOV,AEAD,APEG,ACYA,AEhBJvB,EAAAA,ICLYuB,KAAK,ACOR,AJqBA,EG5BU,AJSR,AGJA,CAACtB,CAAD,CEEG2F,CFFC,CCLSM,AJSR7D,IKFP,CAAYzB,GAAZ,CAAiB+D,CAAD,ALEd,CAAgB/D,EITjB,CJSC,CKFsB,ALEDgC,CAAD,KAAQ;ASHvCsC,ALNuC1D,ACQnCD,ALEEiB,ACmBA,AC/BJ,ACQA,EMAF0C,ILNuC1D,ACQnCD,ELEEiB,CIVoC,ADMnCsD,ECNqC,ACQnC,AHVA,COQC,APRA,COQC4C,AJEA/D,AJqBA,CIrBC,CAACuB,CDRoCE,CKMvC,ATIK,ACmBAnC,CAAC,CQvBC,ATIArB,CAAC,CAACJ,ACmBA,CAAR,AEvBT,EFuBoB8B,CAAC,AEvBArE,CAAC,CAACuF,CECQ,AJsBPrB,EDpBa,GGHrC,EFuB+B,GAAGD,SAA9B,EAAyCD,CAAC,IAAIK,CAA9C,EAAiDL,CAAC,EAAlD,EAAsD;AQtB1D,ALPQ,ACSNzC,AEPkB,APShBqB,ACmBE5C,AChCIsB,ACSV,KCPO,CAAP,ACSEC,AHXQD,EOSNkB,ATIAI,CKFC,AFFAkD,CFuBC9F,CIrBC0E,AJqBA,AChCQ,COSP,AJEA,AJqBA5C,CIrBCqE,AHXQ,EOSN,CAAX,ATIY,EAAExD,AEbQJ,CFaP,CAACK,AGJhB,GAAmB5C,CAAC,CAACuF,EFuBf,AChCE,GDgCkBpB,CEvB1B,mBFuB8C,GAAGpB,aAAvB,GAAuCiB,CAAC,GAAG,CAA/D;AQtBN,ALPD,ACMgC,ALEM,ACsB/BI,ACjC2B7C,ACUjC,KEDuB,CAAhB,AHT0BA,CGSjC,ALE6B,CAApB,CSDJuG,ATCH,AEXkC,ACU/B/B,CFuBC3B,CCjCgC,KAAKxB,EDiC7B,CAAC0B,EEvBf,EFuBM,CQvBN,ARuBoBtE,AEvBAA,CMAC0I,ARuBA,AEvBA,CFuBCnI,AEvBAgF,GMAtB,CAA0B,CAAC3E,CAAD,ARuBpB,AEvBN,EMA8BqH,OAAJ,KAAgB;AACxC,AJEH,ALEE,ACmBI,AClCG,ACWT,KDXQ,CAAP,IOWMU,CAAC,GAAG,KAAKX,WAAL,CAAiBC,OAAjB,CAAR;AACA,ALhD0B,AHuEzB,AClCJ,UOWO,CAACU,CAAC,CAAC1D,UAAP,EAAmB,OAAO,KAAP;AACnBzC,AJjD0B,ALoD5B,AGVqB,MMOnBA,IAAI,CTGC,ESHEmG,CAAC,CAAC1D,CTGC7C,SSHH,CAAaqG,ATGf,CAAgB9H,GSHd,ATGF,CSHL,ATG0BgC,CAAD,KAAQ;ASFjC,ATGArB,ACoBA,AC1EyB,MFsDzBA,KAAK,ESHEkB,ATGAG,ACoBA,CDpBC,CAACJ,ESHE,KAAK,CAAhB,CTEiC;ASDlC,ATGChB,ACmBS0C,KQ3BX,CTQE1C,ECmBS0C,CDnBN,EAAEtB,CAAC,CAACC,ICmBA;AQrBT,ATAmC,ACqBbsB,KDrBK,CAApB,CAAP,CCqBsBA,GQrBf1B,IAAP,ARqBS;AQpBV,AJDH,ALIG,ACiBgCK,MIrB7B6C,EJqB6B7C,OAAtB,SIrBb,CAAyB;AACvB9C,AJoB0CgD,EIpB1ChD,MJoB0CgD,KIpB/B,CAAC/C,CAAD,EAAI,IJoBJ;AQlBXc,AJDE,ALvD2B,AC0E4BsD,EQlBzDtD,MRkByDsD,CInBlD6B,CICC,CAACwC,IAAD,EAAO,KJDb,GAAqBzI,CAAC,CAACuF,MAAvB;AIEA,AJDA,AJkBS,OAAP,EIlBGY,EICE,KAAK2B,IJDZ,GAAmB9H,CAAC,CAACuF,MICd,AJDP,CIC4BmD,IAArB,CAA0B,CAAC9H,CAAD,EAAIqH,OAAJ,KAAgB;AAC/C,AJDF,AJkBC,KAxBD,IIMKlC,GICG4C,CAAC,GAAG,KAAKX,AJDjB,GAAoBhI,CAAC,CAACuF,MICV,AJDZ,CIC6B0C,OAAjB,CAAV;AACA,AJDH,aICUU,CAAC,CAAC7H,QAAF,IAAc6H,CAAC,CAAC7H,QAAF,CAAW2H,IAAX,MAAqB,KAA1C;AACD,ATAL,ACiBI,KQpBO,CAAP,ATGE1G,KCiBK,CAAC,GDjBZ,ACiBe,CDjBC,GCiBGrB,KAAJ,CAAU,KAAKwC,QAAf,CAAJ,EAA8BvC,GAA9B,CAAkCoD,KAAlC,CAAP;AQhBD,AJRsB,ALQvBhE,ACiBC,EDjBDA,WAAW,CAACC,CAAD,EAAI;AACb,SAAKuC,SAAL,GAAiBvC,CAAC,CAACO,MAAnB;ASCFqG,ATAE,ACiBFzF,EQjBAyF,ARiBAzF,ODjBOsB,ACiBA,CAACrB,OAAD,EQjBU,ATAf,ACiBe,CQjBCyF,ETAE7G,CAAC,CAACO,KSAL,CTAf,CSA2B;AAC3B,ATAA,ACiBA,QAAIgE,CDjBC3B,ACiBA,EQjBE,CRiBC,IQjBIkF,CTAZ,ACiBatD,GDjBG,KAAKlC,ACiBb,CAAcmC,IDjBN,ACiBR,CQjBD,ARiBqBC,CQjBAgE,ARiBD,CDjBE,GSAtB,ARiB2BhE,CQjBD,ARiBE,CQjBD9D,ATAA6B,ACiBE2B,CQjBH,EAAI6D,KRiBH,CAAWtD,CQjBZ,ATAjC,KSAiD,ERiBf,CAAoBvD,OAApB,CAA1B,CAAR;AQhBE,ATAF,ACiBA,QAAI,CDjBCyB,ACiBA0B,CAAL,EQjBQoE,ARiBA,CQjBC,GAAG,ATAZ,GAAe3I,ACiBA,CDjBC,CSACgI,ATAAlF,ACiBT,KDjBR,MSAY,CAAiBmF,OAAjB,CAAV;AACA,ATAF,ACiBA,SDjBKlF,CCiBC6B,GQjBG+D,CAAC,ARiBA,CQjBC/B,ERiBErC,CAAC,CAACN,GDjBf,GAAqBjE,CAAC,CAACO,CCiBV,GAAcgE,CQjBlB,ARiBmB,CDjB5B,ACiB6BH,GQjBGuE,CAAC,CAAC/B,GRiBP,CAAW/B,OAAX,CAAmBzD,KQjBd,CAAoByF,CRiBzB,CAA3B,OQjBgC,MAAmC,KAAjE;AACD,ATAF,ACiBC,KQpBO,CAAP,KRoBO;AQhBR,ARgBUjC,MAAAA,IAAF;ADxBK,ACwBGE,MAAAA,OAAO,EAAEC,MAAM,CAACC,aAAP,CAAqBJ,IAArB;AQ5EG,AR4EpB,KAAP;AQbJ,ARcG;AQbH;AACA,ARcEK,EAAAA,UAAU,CAAClE,QAAD,EAAW;AACnB,QAAIA,QAAQ,CAACC,UAAb,EAAyBD,QAAQ,GAAGA,QAAQ,CAACC,UAAT,CAAoB,CAApB,CAAX,CADN,CAGnB;;AACA,QAAI,UAAUD,QAAV,IAAsBA,QAAQ,IAAI,MAAtC,EAA8C,OAAO,CAAP,CAJ3B,CAMnB;;AQnBJ,ARoBI,MQpBEgH,ERoBE,CAAChH,QAAQ,GQpBjB,ARoBoB,CQpBC,KRoBb,MAAwB,MAAxB,IAAkC,CAACA,QAAQ,GAAG,MAAZ,MAAwB,MAA9D,EACE,OAAO,CAAP;AQpBJhB,ARsBE,EQtBFA,MRsBMmF,KQtBK,CAAClF,CAAD,ARsBE,EQtBE6D,CRsBC,KAAKW,IQtBV,EAAgB,ERsBX,CAAcC,IAAd,CACXF,CAAD,IAAOA,CAAC,CAACN,SAAF,IAAelD,QAAf,IAA2BA,QAAQ,IAAIwD,CAAC,CAACL,OADpC,CAAd;AQrBA,ARwBA,QAAI,CAACgB,CQxBC9E,MRwBN,EAAc,EQxBE,GAAI,ERwBC,CAAP,EQxBWA,UAAL,GAAkBJ,CAAC,CAACO,MAAxC;AACA,ARwBA,UQxBML,CRwBCgF,OAAO,CAACd,CQxBC,GAAI,IRwBb,CQxBkBlE,ARwBDa,QAAQ,EQxBZ,CRwBemE,EQxBGlF,CAAC,CAACO,GRwBE,CAAC0D,EQxB3C,ORwBO,CAAP;AQvBA,ARwBD,UQxBO2E,MAAM,GAAI,KAAKA,MAAL,GAAc5I,CAAC,CAACoH,QAAhC,CAHyB,CAGkB;;AAE3C,ARwBFtG,EAAAA,QAAQ,CAACC,QAAD,EAAW,EQxBZ,IAAL,EAAY,OAAZ,EAAoB,MAAM;AACxBf,ARwBF,MQxBEA,CAAC,CAAC8B,GRwBG,KAAKmD,OQxBV,GAAoBpB,ARwBf,CAAgB9C,QAAhB,CQxByB,GAAG6H,ERwBE,CAArC,GQxBE;AACA,ARwBH,aQxBU,6BAAe5I,CAAf,EAAkBI,UAAlB,EAA8BF,UAA9B,CAAP;AACD,KAHD;AAID,ARwBDmB,EAAAA,qBAAqB,CAACqB,iBAAiB,GAAG,KAArB,EAA4B;AAC/C,QAAIA,iBAAJ,EAAuB,OAAO,KAAK8B,QAAZ;AQnCN,ARoCjB,WAAO,KAAKA,QAAL,CAAc7D,GAAd,CAAmB+D,CAAD,KAAQ;AAAEpD,MAAAA,KAAK,EAAEoD,CAAC,CAACT,SAAX;AAAsB1C,MAAAA,GAAG,EAAEmD,CAAC,CAACR;AAA7B,KAAR,CAAlB,CAAP;AACD;;AA/G4B","file":"cmap.8bb5d6b7.js","sourceRoot":"..","sourcesContent":["import { ParsedData } from \"../../../../parser.js\";\n\nclass Subtable extends ParsedData {\n  constructor(p, plaformID, encodingID) {\n    super(p);\n    this.plaformID = plaformID;\n    this.encodingID = encodingID;\n  }\n}\n\nexport { Subtable };\n","import { Subtable } from \"./subtable.js\";\n\nclass Format0 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 0;\n    this.length = p.uint16;\n    this.language = p.uint16;\n    // this isn't worth lazy-loading\n    this.glyphIdArray = [...new Array(256)].map((_) => p.uint8);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) {\n      // TODO: FIXME: map this character to a number based on the Apple standard character to glyph mapping\n      charCode = -1;\n      console.warn(\n        `supports(character) not implemented for cmap subtable format 0. only supports(id) is implemented.`\n      );\n    }\n    return 0 <= charCode && charCode <= 255;\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 0`);\n    return {};\n  }\n\n  getSupportedCharCodes() {\n    return [{ start: 1, end: 256 }];\n  }\n}\n\nexport { Format0 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format2 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 2;\n    this.length = p.uint16;\n    this.language = p.uint16;\n    this.subHeaderKeys = [...new Array(256)].map((_) => p.uint16);\n\n    const subHeaderCount = Math.max(...this.subHeaderKeys);\n\n    const subHeaderOffset = p.currentPosition;\n    lazy(this, `subHeaders`, () => {\n      p.currentPosition = subHeaderOffset;\n      return [...new Array(subHeaderCount)].map((_) => new SubHeader(p));\n    });\n\n    const glyphIndexOffset = subHeaderOffset + subHeaderCount * 8;\n    lazy(this, `glyphIndexArray`, () => {\n      p.currentPosition = glyphIndexOffset;\n      return [...new Array(subHeaderCount)].map((_) => p.uint16);\n    });\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) {\n      // TODO: FIXME: consider implementing the correct mapping, https://docs.microsoft.com/en-us/typography/opentype/spec/cmap#format-2-high-byte-mapping-through-table\n      charCode = -1;\n      console.warn(\n        `supports(character) not implemented for cmap subtable format 2. only supports(id) is implemented.`\n      );\n    }\n\n    const low = charCode && 0xff;\n    const high = charCode && 0xff00;\n    const subHeaderKey = this.subHeaders[high];\n    const subheader = this.subHeaders[subHeaderKey];\n    const first = subheader.firstCode;\n    const last = first + subheader.entryCount;\n    return first <= low && low <= last;\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 2`);\n    return {};\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) {\n      return this.subHeaders.map((h) => ({\n        firstCode: h.firstCode,\n        lastCode: h.lastCode,\n      }));\n    }\n    return this.subHeaders.map((h) => ({\n      start: h.firstCode,\n      end: h.lastCode,\n    }));\n  }\n}\n\nclass SubHeader {\n  constructor(p) {\n    this.firstCode = p.uint16;\n    this.entryCount = p.uint16;\n    this.lastCode = this.first + this.entryCount;\n    this.idDelta = p.int16;\n    this.idRangeOffset = p.uint16;\n  }\n}\n\nexport { Format2 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format4 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 4;\n    this.length = p.uint16;\n    this.language = p.uint16;\n    this.segCountX2 = p.uint16;\n    this.segCount = this.segCountX2 / 2;\n    this.searchRange = p.uint16;\n    this.entrySelector = p.uint16;\n    this.rangeShift = p.uint16;\n\n    // This cmap subformat basically lazy-loads everything. It would be better to\n    // not even lazy load but the code is not ready for selective extraction.\n\n    const endCodePosition = p.currentPosition;\n    lazy(this, `endCode`, () =>\n      p.readBytes(this.segCount, endCodePosition, 16)\n    );\n\n    const startCodePosition = endCodePosition + 2 + this.segCountX2;\n    lazy(this, `startCode`, () =>\n      p.readBytes(this.segCount, startCodePosition, 16)\n    );\n\n    const idDeltaPosition = startCodePosition + this.segCountX2;\n    lazy(\n      this,\n      `idDelta`,\n      () => p.readBytes(this.segCount, idDeltaPosition, 16, true) // Note that idDelta values are signed\n    );\n\n    const idRangePosition = idDeltaPosition + this.segCountX2;\n    lazy(this, `idRangeOffset`, () =>\n      p.readBytes(this.segCount, idRangePosition, 16)\n    );\n\n    const glyphIdArrayPosition = idRangePosition + this.segCountX2;\n    const glyphIdArrayLength =\n      this.length - (glyphIdArrayPosition - this.tableStart);\n    lazy(this, `glyphIdArray`, () =>\n      p.readBytes(glyphIdArrayLength, glyphIdArrayPosition, 16)\n    );\n\n    // also, while not in the spec, we really want to organise all that data into convenient segments\n    lazy(this, `segments`, () =>\n      this.buildSegments(idRangePosition, glyphIdArrayPosition, p)\n    );\n  }\n\n  buildSegments(idRangePosition, glyphIdArrayPosition, p) {\n    const build = (_, i) => {\n      let startCode = this.startCode[i],\n        endCode = this.endCode[i],\n        idDelta = this.idDelta[i],\n        idRangeOffset = this.idRangeOffset[i],\n        idRangeOffsetPointer = idRangePosition + 2 * i,\n        glyphIDs = [];\n\n      // simple case\n      if (idRangeOffset === 0) {\n        for (let i = startCode + idDelta, e = endCode + idDelta; i <= e; i++) {\n          glyphIDs.push(i);\n        }\n      }\n\n      // not so simple case\n      else {\n        for (let i = 0, e = endCode - startCode; i <= e; i++) {\n          p.currentPosition = idRangeOffsetPointer + idRangeOffset + i * 2;\n          glyphIDs.push(p.uint16);\n        }\n      }\n\n      return { startCode, endCode, idDelta, idRangeOffset, glyphIDs };\n    };\n\n    return [...new Array(this.segCount)].map(build);\n  }\n\n  reverse(glyphID) {\n    let s = this.segments.find((v) => v.glyphIDs.includes(glyphID));\n    if (!s) return {};\n    const code = s.startCode + s.glyphIDs.indexOf(glyphID);\n    return { code, unicode: String.fromCodePoint(code) };\n  }\n\n  getGlyphId(charCode) {\n    if (charCode.charCodeAt) charCode = charCode.charCodeAt(0);\n\n    // surrogate pair value?\n    if (0xd800 <= charCode && charCode <= 0xdfff) return 0;\n\n    // one of the exactly 66 noncharacters?\n    if ((charCode & 0xfffe) === 0xfffe || (charCode & 0xffff) === 0xffff)\n      return 0;\n\n    let segment = this.segments.find(\n      (s) => s.startCode <= charCode && charCode <= s.endCode\n    );\n    if (!segment) return 0;\n    return segment.glyphIDs[charCode - segment.startCode];\n  }\n\n  supports(charCode) {\n    return this.getGlyphId(charCode) !== 0;\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) return this.segments;\n    return this.segments.map((v) => ({ start: v.startCode, end: v.endCode }));\n  }\n}\n\nexport { Format4 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format6 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 6;\n    this.length = p.uint16;\n    this.language = p.uint16;\n    this.firstCode = p.uint16;\n    this.entryCount = p.uint16;\n    this.lastCode = this.firstCode + this.entryCount - 1;\n\n    const getter = () => [...new Array(this.entryCount)].map((_) => p.uint16);\n    lazy(this, `glyphIdArray`, getter);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) {\n      // TODO: FIXME: This can be anything, and depends on the Macintosh language indicated by this.language...\n      charCode = -1;\n      console.warn(\n        `supports(character) not implemented for cmap subtable format 6. only supports(id) is implemented.`\n      );\n    }\n    if (charCode < this.firstCode) return {};\n    if (charCode > this.firstCode + this.entryCount) return {};\n    const code = charCode - this.firstCode;\n    return { code, unicode: String.fromCodePoint(code) };\n  }\n\n  reverse(glyphID) {\n    let pos = this.glyphIdArray.indexOf(glyphID);\n    if (pos > -1) return this.firstCode + pos;\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) {\n      return [{ firstCode: this.firstCode, lastCode: this.lastCode }];\n    }\n    return [{ start: this.firstCode, end: this.lastCode }];\n  }\n}\n\nexport { Format6 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format8 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 8;\n    p.uint16;\n    this.length = p.uint32;\n    this.language = p.uint32;\n    this.is32 = [...new Array(8192)].map((_) => p.uint8);\n    this.numGroups = p.uint32;\n    const getter = () =>\n      [...new Array(this.numGroups)].map((_) => new SequentialMapGroup(p));\n    lazy(this, `groups`, getter);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) {\n      // TODO: FIXME: https://docs.microsoft.com/en-us/typography/opentype/spec/cmap#format-8-mixed-16-bit-and-32-bit-coverage is kind of incredible\n      charCode = -1;\n      console.warn(\n        `supports(character) not implemented for cmap subtable format 8. only supports(id) is implemented.`\n      );\n    }\n    return (\n      this.groups.findIndex(\n        (s) => s.startcharCode <= charCode && charCode <= s.endcharCode\n      ) !== -1\n    );\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 8`);\n    return {};\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) return this.groups;\n    return this.groups.map((v) => ({\n      start: v.startcharCode,\n      end: v.endcharCode,\n    }));\n  }\n}\n\nclass SequentialMapGroup {\n  constructor(p) {\n    this.startcharCode = p.uint32;\n    this.endcharCode = p.uint32;\n    this.startGlyphID = p.uint32;\n  }\n}\n\nexport { Format8 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\n// basically Format 6, but for 32 bit characters\nclass Format10 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 10;\n    p.uint16;\n    this.length = p.uint32;\n    this.language = p.uint32;\n    this.startCharCode = p.uint32;\n    this.numChars = p.uint32;\n    this.endCharCode = this.startCharCode + this.numChars;\n    const getter = () => [...new Array(this.numChars)].map((_) => p.uint16);\n    lazy(this, `glyphs`, getter);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) {\n      // TODO: FIXME: This can be anything, and depends on the Macintosh language indicated by this.language...\n      charCode = -1;\n      console.warn(\n        `supports(character) not implemented for cmap subtable format 10. only supports(id) is implemented.`\n      );\n    }\n    if (charCode < this.startCharCode) return false;\n    if (charCode > this.startCharCode + this.numChars) return false;\n    return charCode - this.startCharCode;\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 10`);\n    return {};\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) {\n      return [\n        { startCharCode: this.startCharCode, endCharCode: this.endCharCode },\n      ];\n    }\n    return [{ start: this.startCharCode, end: this.endCharCode }];\n  }\n}\n\nexport { Format10 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\n// basically Format 8, but for 32 bit characters\nclass Format12 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 12;\n    p.uint16;\n    this.length = p.uint32;\n    this.language = p.uint32;\n    this.numGroups = p.uint32;\n    const getter = () =>\n      [...new Array(this.numGroups)].map((_) => new SequentialMapGroup(p));\n    lazy(this, `groups`, getter);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) charCode = charCode.charCodeAt(0);\n\n    // surrogate pair value?\n    if (0xd800 <= charCode && charCode <= 0xdfff) return 0;\n\n    // one of the exactly 66 noncharacters?\n    if ((charCode & 0xfffe) === 0xfffe || (charCode & 0xffff) === 0xffff)\n      return 0;\n\n    return (\n      this.groups.findIndex(\n        (s) => s.startCharCode <= charCode && charCode <= s.endCharCode\n      ) !== -1\n    );\n  }\n\n  reverse(glyphID) {\n    for (let group of this.groups) {\n      let start = group.startGlyphID;\n      if (start > glyphID) continue;\n      if (start === glyphID) return group.startCharCode;\n      let end = start + (group.endCharCode - group.startCharCode);\n      if (end < glyphID) continue;\n      const code = group.startCharCode + (glyphID - start);\n      return { code, unicode: String.fromCodePoint(code) };\n    }\n    return {};\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) return this.groups;\n    return this.groups.map((v) => ({\n      start: v.startCharCode,\n      end: v.endCharCode,\n    }));\n  }\n}\n\nclass SequentialMapGroup {\n  constructor(p) {\n    this.startCharCode = p.uint32;\n    this.endCharCode = p.uint32;\n    this.startGlyphID = p.uint32;\n  }\n}\n\nexport { Format12 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format13 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.format = 13;\n    p.uint16;\n    this.length = p.uint32;\n    this.language = p.uint32;\n    this.numGroups = p.uint32;\n    const getter = [...new Array(this.numGroups)].map(\n      (_) => new ConstantMapGroup(p)\n    );\n    lazy(this, `groups`, getter);\n  }\n\n  supports(charCode) {\n    if (charCode.charCodeAt) charCode = charCode.charCodeAt(0); // assumed safe, might not be?\n    return (\n      this.groups.findIndex(\n        (s) => s.startCharCode <= charCode && charCode <= s.endCharCode\n      ) !== -1\n    );\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 13`);\n    return {};\n  }\n\n  getSupportedCharCodes(preservePropNames = false) {\n    if (preservePropNames) return this.groups;\n    return this.groups.map((v) => ({\n      start: v.startCharCode,\n      end: v.endCharCode,\n    }));\n  }\n}\n\nclass ConstantMapGroup {\n  constructor(p) {\n    this.startCharCode = p.uint32;\n    this.endCharCode = p.uint32;\n    this.glyphID = p.uint32;\n  }\n}\n\nexport { Format13 };\n","import lazy from \"../../../../lazy.js\";\nimport { Subtable } from \"./subtable.js\";\n\nclass Format14 extends Subtable {\n  constructor(p, platformID, encodingID) {\n    super(p, platformID, encodingID);\n    this.subTableStart = p.currentPosition;\n    this.format = 14;\n    this.length = p.uint32;\n    this.numVarSelectorRecords = p.uint32;\n    lazy(this, `varSelectors`, () =>\n      [...new Array(this.numVarSelectorRecords)].map(\n        (_) => new VariationSelector(p)\n      )\n    );\n  }\n\n  supports() {\n    console.warn(`supports not implemented for cmap subtable format 14`);\n    return 0;\n  }\n\n  getSupportedCharCodes() {\n    console.warn(\n      `getSupportedCharCodes not implemented for cmap subtable format 14`\n    );\n    return [];\n  }\n\n  reverse(glyphID) {\n    console.warn(`reverse not implemented for cmap subtable format 14`);\n    return {};\n  }\n\n  supportsVariation(variation) {\n    let v = this.varSelector.find((uvs) => uvs.varSelector === variation);\n    return v ? v : false;\n  }\n\n  getSupportedVariations() {\n    return this.varSelectors.map((v) => v.varSelector);\n  }\n}\n\nclass VariationSelector {\n  constructor(p) {\n    this.varSelector = p.uint24;\n    this.defaultUVSOffset = p.Offset32;\n    this.nonDefaultUVSOffset = p.Offset32;\n  }\n}\n\nexport { Format14 };\n","// cmap subtables\n\nimport { Format0 } from \"./format0.js\";\nimport { Format2 } from \"./format2.js\";\nimport { Format4 } from \"./format4.js\";\nimport { Format6 } from \"./format6.js\";\nimport { Format8 } from \"./format8.js\";\nimport { Format10 } from \"./format10.js\";\nimport { Format12 } from \"./format12.js\";\nimport { Format13 } from \"./format13.js\";\nimport { Format14 } from \"./format14.js\";\n\n/**\n * Cmap Subtable factory\n * @param {int} format the subtable format number (see https://docs.microsoft.com/en-us/typography/opentype/spec/cmap#format-0-byte-encoding-table onward)\n * @param {parser} parser a parser already pointing at the subtable's data location, right after reading the `format` uint16.\n */\nexport default function createSubTable(parser, platformID, encodingID) {\n  const format = parser.uint16;\n  if (format === 0) return new Format0(parser, platformID, encodingID);\n  if (format === 2) return new Format2(parser, platformID, encodingID);\n  if (format === 4) return new Format4(parser, platformID, encodingID);\n  if (format === 6) return new Format6(parser, platformID, encodingID);\n  if (format === 8) return new Format8(parser, platformID, encodingID);\n  if (format === 10) return new Format10(parser, platformID, encodingID);\n  if (format === 12) return new Format12(parser, platformID, encodingID);\n  if (format === 13) return new Format13(parser, platformID, encodingID);\n  if (format === 14) return new Format14(parser, platformID, encodingID);\n  return {};\n}\n","import { SimpleTable } from \"../simple-table.js\";\nimport createSubTable from \"./cmap/createSubTable.js\";\nimport lazy from \"../../../lazy.js\";\n\n/**\n * The OpenType `cmap` main table.\n *\n * Subtables are found in the ./cmap directory\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/cmap for more information\n */\nclass cmap extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n    this.version = p.uint16;\n    this.numTables = p.uint16;\n    this.encodingRecords = [...new Array(this.numTables)].map(\n      (_) => new EncodingRecord(p, this.tableStart)\n    );\n  }\n\n  getSubTable(tableID) {\n    return this.encodingRecords[tableID].table;\n  }\n\n  getSupportedEncodings() {\n    return this.encodingRecords.map((r) => ({\n      platformID: r.platformID,\n      encodingId: r.encodingID,\n    }));\n  }\n\n  getSupportedCharCodes(platformID, encodingID) {\n    const recordID = this.encodingRecords.findIndex(\n      (r) => r.platformID === platformID && r.encodingID === encodingID\n    );\n    if (recordID === -1) return false;\n    const subtable = this.getSubTable(recordID);\n    return subtable.getSupportedCharCodes();\n  }\n\n  reverse(glyphid) {\n    for (let i = 0; i < this.numTables; i++) {\n      let code = this.getSubTable(i).reverse(glyphid);\n      if (code) return code;\n    }\n  }\n\n  getGlyphId(char) {\n    let last = 0;\n    this.encodingRecords.some((_, tableID) => {\n      let t = this.getSubTable(tableID);\n      if (!t.getGlyphId) return false;\n      last = t.getGlyphId(char);\n      return last !== 0;\n    });\n    return last;\n  }\n\n  supports(char) {\n    return this.encodingRecords.some((_, tableID) => {\n      const t = this.getSubTable(tableID);\n      return t.supports && t.supports(char) !== false;\n    });\n  }\n\n  supportsVariation(variation) {\n    return this.encodingRecords.some((_, tableID) => {\n      const t = this.getSubTable(tableID);\n      return t.supportsVariation && t.supportsVariation(variation) !== false;\n    });\n  }\n}\n\n/**\n * ...docs go here...\n */\nclass EncodingRecord {\n  constructor(p, tableStart) {\n    const platformID = (this.platformID = p.uint16);\n    const encodingID = (this.encodingID = p.uint16);\n    const offset = (this.offset = p.Offset32); // from cmap table start\n\n    lazy(this, `table`, () => {\n      p.currentPosition = tableStart + offset;\n      return createSubTable(p, platformID, encodingID);\n    });\n  }\n}\n\nexport { cmap };\n"]}