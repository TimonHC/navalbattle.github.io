{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/color/COLR.js"],"names":["COLR","SimpleTable","constructor","dict","dataview","p","version","uint16","numBaseGlyphRecords","baseGlyphRecordsOffset","Offset32","layerRecordsOffset","numLayerRecords","getBaseGlyphRecord","glyphID","start","tableStart","parser","currentPosition","first","BaseGlyphRecord","firstID","gID","end","last","lastID","mid","middle","midID","getLayers","record","firstLayerIndex","Array","numLayers","map","_","LayerRecord","paletteIndex"],"mappings":"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","file":"COLR.c660372e.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../../simple-table.js\";\n\n/**\n * The OpenType `COLR` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/COLR\n */\nclass COLR extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n    this.version = p.uint16;\n    this.numBaseGlyphRecords = p.uint16;\n    this.baseGlyphRecordsOffset = p.Offset32; // from beginning of COLR table) to Base Glyph records.\n    this.layerRecordsOffset = p.Offset32; // from beginning of COLR table) to Layer Records.\n    this.numLayerRecords = p.uint16;\n  }\n\n  getBaseGlyphRecord(glyphID) {\n    // the documentation recommends doing a binary search to find the record,\n    // and so we shall. The size of a BaseGlyphRecord is 6 bytes, so off we go!\n    let start = this.tableStart + this.baseGlyphRecordsOffset;\n    this.parser.currentPosition = start;\n    let first = new BaseGlyphRecord(this.parser);\n    let firstID = first.gID;\n\n    let end = this.tableStart + this.layerRecordsOffset - 6;\n    this.parser.currentPosition = end;\n    let last = new BaseGlyphRecord(this.parser);\n    let lastID = last.gID;\n\n    // right. Onward, to victory!\n    if (firstID === glyphID) return first;\n    if (lastID === glyphID) return last;\n\n    // delayed gratification!\n    while (true) {\n      if (start === end) break;\n      let mid = start + (end - start) / 12;\n      this.parser.currentPosition = mid;\n      let middle = new BaseGlyphRecord(this.parser);\n      let midID = middle.gID;\n\n      if (midID === glyphID) return middle;\n      // curses!\n      else if (midID > glyphID) {\n        end = mid;\n      } else if (midID < glyphID) {\n        start = mid;\n      }\n    }\n\n    return false;\n  }\n\n  getLayers(glyphID) {\n    let record = this.getBaseGlyphRecord(glyphID);\n    this.parser.currentPosition =\n      this.tableStart + this.layerRecordsOffset + 4 * record.firstLayerIndex;\n    return [...new Array(record.numLayers)].map((_) => new LayerRecord(p));\n  }\n}\n\nclass BaseGlyphRecord {\n  constructor(p) {\n    this.gID = p.uint16;\n    this.firstLayerIndex = p.uint16;\n    this.numLayers = p.uint16;\n  }\n}\n\nclass LayerRecord {\n  constructor(p) {\n    this.gID = p.uint16;\n    this.paletteIndex = p.uint16;\n  }\n}\n\nexport { COLR };\n"]}