{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/advanced/shared/class.js","node_modules/lib-font/src/opentype/tables/advanced/shared/itemvariation.js","node_modules/lib-font/src/opentype/tables/advanced/GDEF.js"],"names":["ClassDefinition","constructor","p","classFormat","uint16","startGlyphID","glyphCount","classValueArray","Array","map","_","classRangeCount","classRangeRecords","ClassRangeRecord","endGlyphID","class","ItemVariationStoreTable","table","parser","start","currentPosition","format","variationRegionListOffset","Offset32","itemVariationDataCount","itemVariationDataOffsets","ItemVariationData","itemCount","shortDeltaCount","regionIndexCount","regionIndexes","deltaSets","DeltaSet","DeltaData","push","in16","int8","GDEF","SimpleTable","dict","dataview","majorVersion","minorVersion","glyphClassDefOffset","Offset16","undefined","tableStart","attachListOffset","AttachList","ligCaretListOffset","LigCaretList","markAttachClassDefOffset","markGlyphSetsDefOffset","MarkGlyphSetsTable","itemVarStoreOffset","ParsedData","coverageOffset","attachPointOffsets","getPoint","pointID","AttachPoint","pointCount","pointIndices","CoverageTable","ligGlyphCount","ligGlyphOffsets","getLigGlyph","ligGlyphID","LigGlyph","caretCount","caretValueOffsets","getCaretValue","caretID","CaretValue","caretValueFormat","coordinate","int16","caretValuePointIndex","deviceOffset","markGlyphSetTableFormat","markGlyphSetCount","coverageOffsets","getMarkGlyphSet","markGlyphSetID"],"mappings":"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","file":"GDEF.7076a775.js","sourceRoot":"..","sourcesContent":["class ClassDefinition {\n  constructor(p) {\n    this.classFormat = p.uint16;\n\n    if (this.classFormat === 1) {\n      this.startGlyphID = p.uint16;\n      this.glyphCount = p.uint16;\n      this.classValueArray = [...new Array(this.glyphCount)].map(\n        (_) => p.uint16\n      );\n    }\n\n    if (this.classFormat === 2) {\n      this.classRangeCount = p.uint16;\n      this.classRangeRecords = [...new Array(this.classRangeCount)].map(\n        (_) => new ClassRangeRecord(p)\n      );\n    }\n  }\n}\n\nclass ClassRangeRecord {\n  constructor(p) {\n    this.startGlyphID = p.uint16;\n    this.endGlyphID = p.uint16;\n    this.class = p.uint16;\n  }\n}\n\nexport { ClassDefinition };\n","class ItemVariationStoreTable {\n  constructor(table, p) {\n    this.table = table;\n    this.parser = p;\n    this.start = p.currentPosition;\n\n    this.format = p.uint16;\n    this.variationRegionListOffset = p.Offset32;\n    this.itemVariationDataCount = p.uint16;\n    this.itemVariationDataOffsets = [\n      ...new Array(this.itemVariationDataCount),\n    ].map((_) => p.Offset32);\n  }\n}\n\nclass ItemVariationData {\n  constructor(p) {\n    this.itemCount = p.uint16;\n    this.shortDeltaCount = p.uint16;\n    this.regionIndexCount = p.uint16;\n    this.regionIndexes = p.uint16;\n    this.deltaSets = [...new Array(this.itemCount)].map(\n      (_) => new DeltaSet(p, this.shortDeltaCount, this.regionIndexCount)\n    );\n  }\n}\n\nclass DeltaSet {\n  constructor(p, shortDeltaCount, regionIndexCount) {\n    // the documentation here seems problematic:\n    //\n    // \"Logically, each DeltaSet record has regionIndexCount number of elements.\n    //  The first shortDeltaCount elements are represented as signed 16-bit values\n    //  (int16), and the remaining regionIndexCount - shortDeltaCount elements are\n    //  represented as signed 8-bit values (int8). The length of the data for each\n    //  row is shortDeltaCount + regionIndexCount.\"\n    //\n    // I'm assuming that should be \"the remaining regionIndexCount elements are\".\n    this.DeltaData = [];\n    while (shortDeltaCount-- > 0) {\n      this.DeltaData.push(p.in16);\n    }\n    while (regionIndexCount-- > 0) {\n      this.DeltaData.push(p.int8);\n    }\n  }\n}\n\nexport { ItemVariationStoreTable };\n","import { ParsedData } from \"../../../parser.js\";\nimport { SimpleTable } from \"../simple-table.js\";\nimport { ClassDefinition } from \"./shared/class.js\";\nimport { CoverageTable } from \"./shared/coverage.js\";\nimport { ItemVariationStoreTable } from \"./shared/itemvariation.js\";\nimport lazy from \"../../../lazy.js\";\n\n/**\n * The OpenType `GDEF` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/GDEF\n */\nclass GDEF extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    // there are three possible versions\n    this.majorVersion = p.uint16;\n    this.minorVersion = p.uint16;\n\n    this.glyphClassDefOffset = p.Offset16;\n    lazy(this, `glyphClassDefs`, () => {\n      if (this.glyphClassDefOffset === 0) return undefined;\n      p.currentPosition = this.tableStart + this.glyphClassDefOffset;\n      return new ClassDefinition(p);\n    });\n\n    this.attachListOffset = p.Offset16;\n    lazy(this, `attachList`, () => {\n      if (this.attachListOffset === 0) return undefined;\n      p.currentPosition = this.tableStart + this.attachListOffset;\n      return new AttachList(p);\n    });\n\n    this.ligCaretListOffset = p.Offset16;\n    lazy(this, `ligCaretList`, () => {\n      if (this.ligCaretListOffset === 0) return undefined;\n      p.currentPosition = this.tableStart + this.ligCaretListOffset;\n      return new LigCaretList(p);\n    });\n\n    this.markAttachClassDefOffset = p.Offset16;\n    lazy(this, `markAttachClassDef`, () => {\n      if (this.markAttachClassDefOffset === 0) return undefined;\n      p.currentPosition = this.tableStart + this.markAttachClassDefOffset;\n      return new ClassDefinition(p);\n    });\n\n    if (this.minorVersion >= 2) {\n      this.markGlyphSetsDefOffset = p.Offset16;\n      lazy(this, `markGlyphSetsDef`, () => {\n        if (this.markGlyphSetsDefOffset === 0) return undefined;\n        p.currentPosition = this.tableStart + this.markGlyphSetsDefOffset;\n        return new MarkGlyphSetsTable(p);\n      });\n    }\n\n    if (this.minorVersion === 3) {\n      this.itemVarStoreOffset = p.Offset32;\n      lazy(this, `itemVarStore`, () => {\n        if (this.itemVarStoreOffset === 0) return undefined;\n        p.currentPosition = this.tableStart + this.itemVarStoreOffset;\n        return new ItemVariationStoreTable(p);\n      });\n    }\n  }\n}\n\nclass AttachList extends ParsedData {\n  constructor(p) {\n    super(p);\n    this.coverageOffset = p.Offset16; // Offset to Coverage table - from beginning of AttachList table\n    this.glyphCount = p.uint16;\n    this.attachPointOffsets = [...new Array(this.glyphCount)].map(\n      (_) => p.Offset16\n    ); // From beginning of AttachList table (in Coverage Index order)\n  }\n  getPoint(pointID) {\n    this.parser.currentPosition = this.start + this.attachPointOffsets[pointID];\n    return new AttachPoint(this.parser);\n  }\n}\n\nclass AttachPoint {\n  constructor(p) {\n    this.pointCount = p.uint16;\n    this.pointIndices = [...new Array(this.pointCount)].map((_) => p.uint16);\n  }\n}\n\nclass LigCaretList extends ParsedData {\n  constructor(p) {\n    super(p);\n\n    this.coverageOffset = p.Offset16;\n\n    lazy(this, `coverage`, () => {\n      p.currentPosition = this.start + this.coverageOffset;\n      return new CoverageTable(p);\n    });\n\n    this.ligGlyphCount = p.uint16;\n    this.ligGlyphOffsets = [...new Array(this.ligGlyphCount)].map(\n      (_) => p.Offset16\n    ); // From beginning of LigCaretList table\n  }\n\n  getLigGlyph(ligGlyphID) {\n    this.parser.currentPosition = this.start + this.ligGlyphOffsets[ligGlyphID];\n    return new LigGlyph(this.parser);\n  }\n}\n\nclass LigGlyph extends ParsedData {\n  constructor(p) {\n    super(p);\n    this.caretCount = p.uint16;\n    this.caretValueOffsets = [...new Array(this.caretCount)].map(\n      (_) => p.Offset16\n    ); // From beginning of LigGlyph table\n  }\n\n  getCaretValue(caretID) {\n    this.parser.currentPosition = this.start + this.caretValueOffsets[caretID];\n    return new CaretValue(this.parser);\n  }\n}\n\nclass CaretValue {\n  constructor(p) {\n    this.caretValueFormat = p.uint16;\n\n    if (this.caretValueFormat === 1) {\n      this.coordinate = p.int16;\n    }\n\n    if (this.caretValueFormat === 2) {\n      this.caretValuePointIndex = p.uint16;\n    }\n\n    if (this.caretValueFormat === 3) {\n      this.coordinate = p.int16;\n      this.deviceOffset = p.Offset16; // Offset to Device table (non-variable font) / Variation Index table (variable font) for X or Y value-from beginning of CaretValue table\n    }\n  }\n}\n\nclass MarkGlyphSetsTable extends ParsedData {\n  constructor(p) {\n    super(p);\n\n    this.markGlyphSetTableFormat = p.uint16;\n    this.markGlyphSetCount = p.uint16;\n    this.coverageOffsets = [...new Array(this.markGlyphSetCount)].map(\n      (_) => p.Offset32\n    );\n  }\n\n  getMarkGlyphSet(markGlyphSetID) {\n    this.parser.currentPosition =\n      this.start + this.coverageOffsets[markGlyphSetID];\n    return new CoverageTable(this.parser);\n  }\n}\n\nexport { GDEF };\n"]}