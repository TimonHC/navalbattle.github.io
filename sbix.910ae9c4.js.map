{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/bitmap/sbix.js"],"names":["sbix","SimpleTable","constructor","dict","dataview","p","version","uint16","flags","numStrikes","uint32","Array","map","_","Offset32","Strike","ParsedData","numGlyphs","ppem","ppi","GlyphData","originOffsetX","int16","originOffsetY","graphicType","tag","len","readBytes"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMF,IAAN,EAAYC,QAAZ,CAAd;AAEA,SAAKE,OAAL,GAAeD,CAAC,CAACE,MAAjB;AACA,SAAKC,KAAL,GAAaH,CAAC,CAACG,KAAF,CAAQ,EAAR,CAAb;AACA,SAAKC,UAAL,GAAkBJ,CAAC,CAACK,MAApB;AACA,uBAAK,IAAL,EAAY,eAAZ,EAA4B,MAC1B,CAAC,GAAG,IAAIC,KAAJ,CAAU,KAAKF,UAAf,CAAJ,EAAgCG,GAAhC,CAAqCC,CAAD,IAAOR,CAAC,CAACS,QAA7C,CADF,EAN0B,CAQvB;AACJ,GAV4B,CAY7B;;;AAZ6B;;;;AAe/B,MAAMC,MAAN,SAAqBC,kBAArB,CAAgC;AAC9Bd,EAAAA,WAAW,CAACG,CAAD,EAAIY,SAAJ,EAAe;AACxB,SAAKC,IAAL,GAAYb,CAAC,CAACE,MAAd;AACA,SAAKY,GAAL,GAAWd,CAAC,CAACE,MAAb;AACA,uBAAK,IAAL,EAAY,kBAAZ,EAA+B,MAC7B,CAAC,GAAG,IAAII,KAAJ,CAAUM,SAAS,GAAG,CAAtB,CAAJ,EAA8BL,GAA9B,CAAmCC,CAAD,IAAOR,CAAC,CAACS,QAA3C,CADF,EAHwB,CAKrB;AACJ,GAP6B,CAS9B;;;AAT8B;;AAYhC,MAAMM,SAAN,CAAgB;AACdlB,EAAAA,WAAW,CAACG,CAAD,EAAI;AACb,SAAKgB,aAAL,GAAqBhB,CAAC,CAACiB,KAAvB;AACA,SAAKC,aAAL,GAAqBlB,CAAC,CAACiB,KAAvB;AACA,SAAKE,WAAL,GAAmBnB,CAAC,CAACoB,GAArB,CAHa,CAKb;AACA;;AACA,UAAMC,GAAG,GAAG,CAAZ;AACA,uBAAK,IAAL,EAAY,MAAZ,EAAmB,MAAMrB,CAAC,CAACsB,SAAF,CAAYD,GAAZ,CAAzB,EARa,CAUb;AACD;;AAZa","file":"sbix.910ae9c4.js","sourceRoot":"..","sourcesContent":["import { ParsedData } from \"../../../../parser.js\";\nimport { SimpleTable } from \"../../simple-table.js\";\nimport lazy from \"../../../../lazy.js\";\n\n/**\n * The OpenType `sbix` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/sbix\n *\n * Notes:\n *   The glyph count is derived from the 'maxp' table. Advance and side-bearing\n *   glyph metrics are stored in the 'hmtx' table for horizontal layout, and\n *   the 'vmtx' table for vertical layout.\n *\n */\nclass sbix extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    this.version = p.uint16;\n    this.flags = p.flags(16);\n    this.numStrikes = p.uint32;\n    lazy(this, `strikeOffsets`, () =>\n      [...new Array(this.numStrikes)].map((_) => p.Offset32)\n    ); // from the beginning of the 'sbix' table\n  }\n\n  // TODO: add a strike accessor\n}\n\nclass Strike extends ParsedData {\n  constructor(p, numGlyphs) {\n    this.ppem = p.uint16;\n    this.ppi = p.uint16;\n    lazy(this, `glyphDataOffsets`, () =>\n      [...new Array(numGlyphs + 1)].map((_) => p.Offset32)\n    ); // from the beginning of the strike data header\n  }\n\n  // TODO: add a glyph data accessor\n}\n\nclass GlyphData {\n  constructor(p) {\n    this.originOffsetX = p.int16;\n    this.originOffsetY = p.int16;\n    this.graphicType = p.tag;\n\n    // The actual embedded graphic data has a byte length that is inferred from sequential\n    // entries in the strike.glyphDataOffsets array + the fixed size (8 bytes) of the preceding fields.\n    const len = 0;\n    lazy(this, `data`, () => p.readBytes(len));\n\n    // TODO: make this.data load in the correct data\n  }\n}\n\nexport { sbix };\n"]}