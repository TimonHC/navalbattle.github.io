{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/other/meta.js"],"names":["meta","SimpleTable","constructor","dict","dataview","p","version","uint32","flags","dataMapsCount","dataMaps","Array","map","_","DataMap","tableStart","parser","tag","dataOffset","Offset32","dataLength","getData","currentField","readBytes"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA,MAAMA,IAAN,SAAmBC,wBAAnB,CAA+B;AAC7BC,EAAAA,WAAW,CAACC,IAAD,EAAOC,QAAP,EAAiB;AAC1B,UAAM;AAAEC,MAAAA;AAAF,QAAQ,MAAMF,IAAN,EAAYC,QAAZ,CAAd;AAEA,SAAKE,OAAL,GAAeD,CAAC,CAACE,MAAjB;AACA,SAAKC,KAAL,GAAaH,CAAC,CAACE,MAAf;AACAF,IAAAA,CAAC,CAACE,MAAF;AACA,SAAKE,aAAL,GAAqBJ,CAAC,CAACE,MAAvB;AAEA,SAAKG,QAAL,GAAgB,CAAC,GAAG,IAAIC,KAAJ,CAAU,KAAKF,aAAf,CAAJ,EAAmCG,GAAnC,CACbC,CAAD,IAAO,IAAIC,OAAJ,CAAY,KAAKC,UAAjB,EAA6BV,CAA7B,CADO,CAAhB;AAGD;;AAZ4B;;;;AAe/B,MAAMS,OAAN,CAAc;AACZZ,EAAAA,WAAW,CAACa,UAAD,EAAaV,CAAb,EAAgB;AACzB,SAAKU,UAAL,GAAkBA,UAAlB;AACA,SAAKC,MAAL,GAAcX,CAAd;AAEA,SAAKY,GAAL,GAAWZ,CAAC,CAACY,GAAb;AACA,SAAKC,UAAL,GAAkBb,CAAC,CAACc,QAApB,CALyB,CAKK;;AAC9B,SAAKC,UAAL,GAAkBf,CAAC,CAACE,MAApB;AACD;;AAEDc,EAAAA,OAAO,GAAG;AACR;AACA,SAAKL,MAAL,CAAYM,YAAZ,GAA2B,KAAKP,UAAL,GAAkB,KAAKG,UAAlD;AACA,WAAO,KAAKF,MAAL,CAAYO,SAAZ,CAAsB,KAAKH,UAA3B,CAAP;AACD;;AAdW","file":"meta.66ac8f0b.js","sourceRoot":"..","sourcesContent":["import { SimpleTable } from \"../../simple-table.js\";\n\n/**\n * The OpenType `meta` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/meta\n */\nclass meta extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    this.version = p.uint32;\n    this.flags = p.uint32;\n    p.uint32;\n    this.dataMapsCount = p.uint32;\n\n    this.dataMaps = [...new Array(this.dataMapsCount)].map(\n      (_) => new DataMap(this.tableStart, p)\n    );\n  }\n}\n\nclass DataMap {\n  constructor(tableStart, p) {\n    this.tableStart = tableStart;\n    this.parser = p;\n\n    this.tag = p.tag;\n    this.dataOffset = p.Offset32; // from the beginning of the metadata table to the data for this tag.\n    this.dataLength = p.uint32;\n  }\n\n  getData() {\n    // If you need this data, you're on the hook for parsing it properly.\n    this.parser.currentField = this.tableStart + this.dataOffset;\n    return this.parser.readBytes(this.dataLength);\n  }\n}\n\nexport { meta };\n"]}