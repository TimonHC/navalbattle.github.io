{"version":3,"sources":["node_modules/lib-font/src/opentype/tables/simple/name.js"],"names":["name","SimpleTable","constructor","dict","dataview","p","format","uint16","count","stringOffset","Offset16","nameRecords","Array","map","_","NameRecord","langTagCount","langTagRecords","LangTagRecord","stringStart","tableStart","get","nameID","record","find","string","length","offset","nameTable","platformID","encodingID","languageID","currentPosition","decodeString","str","i","e","String","fromCharCode","join","bytes","readBytes","forEach","b"],"mappings":"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","file":"name.37db44aa.js","sourceRoot":"..","sourcesContent":["import { Parser } from \"../../../parser.js\";\nimport { SimpleTable } from \"../simple-table.js\";\nimport lazy from \"../../../lazy.js\";\n\n/**\n * The OpenType `name` table.\n *\n * See https://docs.microsoft.com/en-us/typography/opentype/spec/name\n */\nclass name extends SimpleTable {\n  constructor(dict, dataview) {\n    const { p } = super(dict, dataview);\n\n    this.format = p.uint16;\n    this.count = p.uint16;\n    this.stringOffset = p.Offset16; // relative to start of table\n\n    // name records\n    this.nameRecords = [...new Array(this.count)].map(\n      (_) => new NameRecord(p, this)\n    );\n\n    // lang-tag records, if applicable\n    if (this.format === 1) {\n      this.langTagCount = p.uint16;\n      this.langTagRecords = [...new Array(this.langTagCount)].map(\n        (_) => new LangTagRecord(p.uint16, p.Offset16)\n      );\n    }\n\n    // cache these values for use in `.get(nameID)`\n    this.stringStart = this.tableStart + this.stringOffset;\n  }\n\n  /**\n   * Resolve a string by ID\n   * @param {uint16} nameID the id used to find the name record to resolve.\n   */\n  get(nameID) {\n    let record = this.nameRecords.find((record) => record.nameID === nameID);\n    if (record) return record.string;\n  }\n}\n\n/**\n * ...docs go here...\n */\nclass LangTagRecord {\n  constructor(length, offset) {\n    this.length = length;\n    this.offset = offset;\n  }\n}\n\n/**\n * ...docs go here...\n */\nclass NameRecord {\n  constructor(p, nameTable) {\n    this.platformID = p.uint16;\n    this.encodingID = p.uint16;\n    this.languageID = p.uint16;\n    this.nameID = p.uint16;\n    this.length = p.uint16;\n    this.offset = p.Offset16;\n\n    lazy(this, `string`, () => {\n      p.currentPosition = nameTable.stringStart + this.offset;\n      return decodeString(p, this);\n    });\n  }\n}\n\n/**\n * Specific platforms and platform/encoding combinations encode strings in\n * different ways.\n */\nfunction decodeString(p, record) {\n  const { platformID, length } = record;\n\n  if (length === 0) return ``;\n\n  // We decode strings for the Unicode/Microsoft platforms as UTF-16\n  if (platformID === 0 || platformID === 3) {\n    const str = [];\n    for (let i = 0, e = length / 2; i < e; i++)\n      str[i] = String.fromCharCode(p.uint16);\n    return str.join(``);\n  }\n\n  // Everything else, we treat as plain bytes.\n  const bytes = p.readBytes(length);\n  const str = [];\n  bytes.forEach(function (b, i) {\n    str[i] = String.fromCharCode(b);\n  });\n  return str.join(``);\n\n  // TODO: if someone wants to finesse this/implement all the other string encodings, have at it!\n}\n\nexport { name };\n"]}